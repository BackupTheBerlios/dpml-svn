<?xml version="1.0" encoding="UTF-8"?>
<document> 
  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Central</title>
  </properties>
  <body>
    <section name="Depot Preferences ...">

      <p>
      To launch the Depot Preferences application enter the following:
      </p>
 
<pre>$ depot -prefs</pre>

      <subsection name="Cache and Host Preferences ...">

        <p>
        The main Transit panel contains a list of the transit hosts 
        and a button for cache settings.
        </p>

          <img src="/images/depot/transit-main-dialog.png"/>

        <p>
        Selecting a host and hitting the Edit button (or simply 
        double-clicking on the item) brings up a host dialog box.
        </p>

          <img src="/images/depot/resource-host-dialog.png"/>

        <p>
        Modification to base url and enabled status will be reflected in 
        running transit instances that are launched with prefs enabled 
        Group, repository layout and credentials settings are not 
        implemented yet (volunteers appreciated).
        </p>

        <p>
        The cache button returns the following dialog:
        </p>

          <img src="/images/depot/transit-cache-dialog.png"/>

        <p>
        The change button will bring up a file selection dialog box. 
        Modifications to the cache directory value will effect all 
        running pref-enabled transit instances as such this can be 
        dangerous (running the $ depot -reset command will take you 
        back to factory defaults if you get into trouble).
        </p>

      </subsection>

      <subsection name="Content Handler Preferences ...">

        <p>
        The content tab contains a controller button and the the list of 
        handlers. The content handler controller button allows you to 
        declare a custom content handler controller (which is optional). If 
        you declare a controller you are telling transit to use your plugin 
        for content management thereby overriding transit default content 
        management.
        </p>

          <img src="/images/depot/content-dialog.png"/>

        <p>
        You can add content handlers by clicking on the "Add" button. 
        You generally add a contrent handler if you want to access content 
        from a URL (e.g. URL.getContent() ) and you would like to declare 
        the application that will handle this request. The add button brings 
        up a dialog box requesting the name of the content type. A content 
        type name is the same a the type used in Transit artifact references 
        (e.g. "jar", "part", etc.). The following pic shows the creation of 
        a new handler for the "part" content type:
        </p>

          <img src="/images/depot/add-content-handler.png"/>

        <p>
        After clicking on OK you will presented with the content handler 
        dialog. I've filled in the dialog below to use the dpml-composition-unit 
        plugin as the controller. In effect I'm telling Transit that when a client 
        requests the content of an artifact of the type "part", I want Transit to 
        delegate content resolution requests to the ContentHandler that is 
        established from my plugin. In this example I'm saying that I want Metro 
        FT to handle all request for content related to the "part" type.
        </p>

          <img src="/images/depot/content-handler.png"/>

        <p>
        After hitting the "Install" button the "Controller Settings" button 
        will become enabled (if the selected plugin has an associated control 
        panel).  The following picture illastrates a plugin that includes 
        a bundled control panel. 
        </p>

          <img src="/images/depot/metro-ft-prefs.png"/>

      </subsection>

      <subsection name="Logging Preferences ...">

        <p>
        The logging tab is currently empty and will be used for the default 
        logging configuration. The depot class launching all of this is actually 
        handling the establishment of a LoggingManager so that we will be able 
        to centralize logging behavior for all DPML applications.
        </p>

      </subsection>

      <subsection name="Application Profiles ...">

        <p>
        The profiles tab is for the registration of application profiles. The 
        aim here is to remove application launch concerns from the Transit 
        system which in turn will let us tighten the focus of Transit as a 
        resource and content management system.
        </p>

        <p>
        Depot profiles are basically a description of an application - it's 
        main class, classloader entries, system property requirements, etc. 
        stored as user defined preferences.  Depot establishes the initial 
        system classloader and populates this with the classpath prior to 
        instance creation. Internally the preferences Swing app is an example 
        of a application launched by Depot with dependencies on a couple of 
        jar files (transit and depot-station).
        </p>

      </subsection>

    </section>

  </body>

</document>

