<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- 
 Copyright 2005 David Leangen
 Copyright 2004-2005 Stephen McConnell
 Copyright 2004 Niclas Hedhman

 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at 
 
   http://www.dpml.net/central/about/legal/ 
 
 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.
 
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>
  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Transit</title>
  </properties> 

  <body>
    <section name="Transit Configuration">

        <p>
        The Transit Management API provides a comprehensive control model
        for the management of runtime Transit systems.  
        </p>

        <subsection name="Features">

          <ol>
            <li>Multiple named configuration profiles</li>
            <li>Cache management control.</li>
            <li>Host addition, removal, and individual host manipulation.</li>
            <li>Layout registry management.</li>
            <li>Content registries and dynamic addition, removal and configuration 
              of plugable content handlers.</li>
            <li>Proxy setting control.</li>
            <li>Fully integrated with <code>java.util.prefs</code> storage APIs</li>
            <li>Accessible via RMI</li>
          </ol>

        </subsection>

        <subsection name="System Properties">

          <p>
          A management model may be supplied as an initiaization otherwise, a default model 
          will be created.  The semantics related to default model creation are a function of 
          the following system properties.
          </p>

          <table>
            <tr>
              <td>dpml.transit.authority</td>
              <td>If the property value is declared Transit will attempt to establish
                  an authorative URL from the property value.  The URL will be used 
                  to resolve <a href="cache.html">cache properties</a> and 
                  <a href="hosts.html">host properties</a>.  The 
                  data from the property files will be applied to a transient storage
                  model based on a in-memory Preference node using the 
                  <a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/store/LocalPreferencesFactory.html">
                  LocalPreferences</a> SPI class.
                  If this property is not present, the model will be constructed using 
                  information presents under <code>net/dpml/transit/profile/[profile-name]</code> 
                  user preferences node using the default or customer configured Preferences SPI.  
                  If the node does not exist the data will
                  be populated with initial factory defaults.
              </td>
            </tr>
            <tr>
              <td>dpml.transit.profile</td>
              <td>Optionally declares that a named profile shall be used.  This 
                overrides the default selection of a profile named <code>default</code>.
                If the named profile does not exist it will be created and initiazed using 
                either factory defaults or the authoritive configuration is an authoritive 
                URL is declared.
              </td>
            </tr>
          </table>

        </subsection>

        <subsection name="Programatic Model Creation">

          <p>
          A Transit Management Model is created and supplied to the Transit runtime.
          The runtime used management APIs to register listeners for model changes and
          will automatically reflect model changes in the runtime.  Developers concerned
          with long-term managment of a Transit system need only be concerned with 
          the management of an instance of 
          <a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/model/TransitModel.html">TransitModel</a>.
          The following code demonstrates the default behaviour of the Transit system.
          </p>

<pre>
  <a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/model/TransitModel.html">TransitModel</a> model = new <a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/model/DefaultTransitModel.html">DefaultTransitModel()</a>
  <a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/Transit.html">Transit</a> runtime = Transit.getInstance( model );
</pre>

          <p>
          Finer grain control over the initial model is available using the 
          <a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/store/TransitStorageUnit.html">
          TransitStorageUnit</a> class which can be constructed using a profile name, 
          preference node, or authorative URL.  The storage unit will be initially configured
          relative to the supplied arguments and may be further customized prior to supplying
          the instance as an argument to the <code>TransitModel</code> 
          constructor.  Reader interested in the available management functions should review the 
          JavaDoc APIs for both the <code>TransitStorageUnit</code> and <code>TransitModel</code> 
          classes.
          </p>

        </subsection>

        <subsection name="Remote Access">

           <p>
           Advanced applications can take advantage of the remote capabilities of the 
           Transit Management API.  All functions of the may be accessed via RMI however, 
           please keep in mind that the API design is structured with the objective of 
           supporting multiple shared Transit instances within local area environment.  
           Applications wishing to put in place remote management should consider 
           adapters between the local machine environment and a remote management point.
           The following code shows the aquisition of a Transit management model from
           an RMI registry (this assumes you have registered the Transit model into 
           a registry under the name <code>//dpml/transit/default</code>:
           </p>

<pre>
  TransitModel model = (TransitModel) registry.lookup( "//dpml/transit/default" );
</pre>

        </subsection>

    </section>

  </body>
</document>
