<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright 2004 Stephen J McConnell
  Copyright 2004 Niclas Hedhman

  Licensed  under the  Apache License,  Version 2.0  (the "License");
  you may not use  this file  except in  compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed  under the  License is distributed on an "AS IS" BASIS,
  WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
  implied.

  See the License for the specific language governing permissions and
  limitations under the License.
-->

<project name="bootstrap">

  <tstamp/>

  <!--
  Environment setup.
  -->

  <property environment="ENV"/>

  <property file="${basedir}/user.properties"/>
  <property file="${home}/user.properties"/>
  <property file="${basedir}/build.properties"/>
  <property file="${home}/common.properties"/>

  <property name="junit.url" value="http://repository.dpml.net/classic/junit/jars/junit-3.8.1.jar"/>

  <condition property="dpml.appdata.declared" value="true">
    <isset property="ENV.APPDATA"/>
  </condition>

  <condition property="dpml.home.declared" value="true">
    <isset property="ENV.DPML_HOME"/>
  </condition>

  <condition property="dpml.system.declared" value="true">
    <isset property="ENV.DPML_SYSTEM"/>
  </condition>

  <condition property="gpg.declared" value="true">
    <isset property="project.gpg.exe"/>
  </condition>

  <condition property="isWindows" value="true">
    <os family="windows"/>
  </condition>

  <target name="setup" depends="dpml-setup,junit-setup"/>

  <target name="dpml-setup" depends="dpml-home,dpml-data,dpml-prefs,dpml-system"/>

  <target name="dpml-home-environment" if="dpml.home.declared">
    <property name="dpml.home" location="${ENV.DPML_HOME}"/>
  </target>

  <target name="dpml-appdata-environment" depends="dpml-home-environment" unless="dpml.home.declared" if="dpml.appdata.declared">
    <property name="dpml.home" location="${ENV.APPDATA}/DPML"/>
  </target>

  <target name="dpml-home-default" depends="dpml-appdata-environment" unless="dpml.home.declared">
    <property name="dpml.home" location="${user.home}/.dpml"/>
  </target>

  <target name="dpml-home" depends="dpml-home-default">
    <mkdir dir="${dpml.home}"/>
  </target>

  <target name="dpml-data-unix" depends="dpml-home" unless="isWindows">
    <property name="dpml.data" location="${dpml.home}/data"/>
  </target>

  <target name="dpml-data-windows" depends="dpml-home" if="isWindows">
    <property name="dpml.data" location="${dpml.home}/Data"/>
  </target>

  <target name="dpml-data" depends="dpml-data-unix,dpml-data-windows">
    <echo>$${dpml.data} set to ${dpml.data}</echo>
    <mkdir dir="${dpml.data}"/>
    <property name="dpml.local.cache" location="${dpml.data}/cache"/>
    <property name="dpml.docs" location="${dpml.data}/docs"/>
    <property name="dpml.dist" location="${dpml.data}/dist"/>
    <property name="dpml.logs" location="${dpml.data}/logs"/>
    <echo>$${dpml.local.cache} set to ${dpml.local.cache}</echo>
    <echo>$${dpml.docs} set to ${dpml.docs}</echo>
    <echo>$${dpml.dist} set to ${dpml.dist}</echo>
    <echo>$${dpml.logs} set to ${dpml.logs}</echo>
    <mkdir dir="${dpml.local.cache}"/>
    <mkdir dir="${dpml.docs}"/>
    <mkdir dir="${dpml.dist}"/>
    <mkdir dir="${dpml.logs}"/>
  </target>

  <target name="dpml-prefs-unix" depends="dpml-home" unless="isWindows">
    <property name="dpml.prefs" location="${dpml.home}/prefs"/>
  </target>

  <target name="dpml-prefs-windows" depends="dpml-home" if="isWindows">
    <property name="dpml.prefs" location="${dpml.home}/Preferences"/>
  </target>

  <target name="dpml-prefs" depends="dpml-prefs-unix,dpml-prefs-windows">
    <mkdir dir="${dpml.prefs}"/>
  </target>

  <target name="dpml-system-environment" if="dpml.system.declared">
    <property name="dpml.system" location="${ENV.DPML_SYSTEM}"/>
  </target>

  <target name="dpml-system-windows" depends="dpml-system-environment,dpml-home" if="isWindows">
    <property name="dpml.system" location="${dpml.home}/Shared"/>
    <mkdir dir="${dpml.system}"/>
  </target>

  <target name="dpml-system-nix" depends="dpml-system-environment,dpml-home" unless="isWindows">
    <property name="dpml.system" location="${dpml.home}/share"/>
  </target>

  <target name="dpml-system" depends="dpml-system-nix,dpml-system-windows">
    <mkdir dir="${dpml.system}"/>
  </target>

  <target name="junit-test" depends="dpml-data">
    <mkdir dir="${dpml.local.cache}/junit/jars"/>
    <get src="${junit.url}" usetimestamp="true" dest="${dpml.local.cache}/junit/jars/${junit.filename}"/>
    <available property="junit.available" file="${user.home}/.ant/lib/junit.jar"/>
  </target>

  <target name="junit-setup" depends="junit-test" unless="junit.available">
    <property name="junit.url" value="${dpml.repository}/junit/jars/${junit.filename}"/>
    <echo>
#----------------------------------------------------------------------------------
# Installing JUnit
#----------------------------------------------------------------------------------
    </echo>
    <mkdir dir="${dpml.local.cache}/junit/jars"/>
    <get src="${junit.url}" usetimestamp="true" dest="${dpml.local.cache}/junit/jars/${junit.filename}"/>
    <mkdir dir="${user.home}/.ant/lib"/>
    <copy tofile="${user.home}/.ant/lib/junit.jar" file="${dpml.local.cache}/junit/jars/${junit.filename}"/>
    <echo>
#----------------------------------------------------------------------------------
# The build procedure has updated the contents of the .ant/lib directory.  In order
# to include the junit file within ant's classloader please restart the build.
#----------------------------------------------------------------------------------
    </echo>
    <fail status="99" message="Ant lib updated (restart may be required)."/>
  </target>

  <!-- project setup -->

  <property name="project.name" value="UNKNOWN"/>
  <property name="project.type" value="jar"/>
  <property name="project.dir" location="${basedir}/target/test"/>

  <condition property="signature.declared" value="true">
    <isset property="build.signature"/>
  </condition>

  <property name="src" value="src"/>
  <property name="src.main" value="main"/>
  <property name="src.main.dir" value="${src}/${src.main}"/>
  <property name="src.test" value="test"/>
  <property name="src.test.dir" value="${src}/${src.test}"/>

  <property name="etc" value="etc"/>
  <property name="etc.main" value="${etc}/main"/>
  <property name="etc.deliverables" value="${etc}/deliverables"/>
  <property name="etc.test" value="${etc}/test"/>

  <property name="target" value="target"/>
  <property name="target.dir" value="${target}"/>

  <property name="target.build.dir" value="${target.dir}/build"/>
  <property name="target.build.test.dir" value="${target.build.dir}/test"/>
  <property name="target.build.main.dir" value="${target.build.dir}/main"/>

  <property name="target.classes.dir" value="${target.dir}/classes"/>
  <property name="target.test-classes.dir" value="${target.dir}/test-classes"/>
  <property name="target.test-reports.dir" value="${target.dir}/test-reports"/>
  <property name="target.test.dir" value="${target.dir}/test"/>

  <property name="target.deliverables.dir" value="${target.dir}/deliverables"/>
  <property name="target.deliverables.jars.dir" value="${target.deliverables.dir}/jars"/>

  <target name="setupReleaseFilename" if="signature.declared">
    <property name="project.version" value="${build.signature}"/>
  </target>

  <target name="init" depends="setup,setupReleaseFilename">
    <property name="project.version" value="SNAPSHOT"/>
    <property name="build.signature" value="SNAPSHOT"/>
    <property name="project.filename" value="${project.name}-${project.version}.${project.type}"/>
    <property name="dpml-transit-handler.filename" value="dpml-transit-main-${project.version}.jar"/>
    <echo>
#----------------------------------------------------------------------------------
# ${project.group}/${project.name}#${project.version}
#----------------------------------------------------------------------------------
    </echo>
  </target>

  <target name="setup-path" depends="init">
    <path id="project.main.path">
      <pathelement location="${ENV.ANT_HOME}/lib/ant.jar"/>
      <pathelement location="${target.classes.dir}"/>
    </path>
    <path id="project.test.path">
      <path refid="project.main.path"/>
      <pathelement location="${ENV.ANT_HOME}/lib/ant-junit.jar"/>
      <pathelement location="${dpml.local.cache}/junit/jars/${junit.filename}"/>
    </path>
  </target>

  <available file="${etc.deliverables}" property="etc.deliverables.available"/>
  <target name="prepare-etc-deliverable" if="etc.deliverables.available">
    <mkdir dir="${target.deliverables.dir}"/>
    <copy toDir="${target.deliverables.dir}" filtering="on" failonerror="false">
      <fileset dir="${etc.deliverables}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <available file="${etc.main}" property="etc.main.available"/>
  <target name="prepare-etc-main" if="etc.main.available">
    <mkdir dir="${target.build.main.dir}"/>
    <copy toDir="${target.build.main.dir}" filtering="on" failonerror="false">
      <fileset dir="${etc.main}">
        <include name="**/*"/>
        <exclude name="**/*.jpg"/>
        <exclude name="**/*.jpeg"/>
        <exclude name="**/*.png"/>
        <exclude name="**/*.gif"/>
      </fileset>
    </copy>
    <copy toDir="${target.build.main.dir}" filtering="off" failonerror="false">
      <fileset dir="${etc.main}">
        <include name="**/*.jpg"/>
        <include name="**/*.jpeg"/>
        <include name="**/*.png"/>
        <include name="**/*.gif"/>
      </fileset>
    </copy>
  </target>

  <available file="${etc.test}" property="etc.test.available"/>
  <target name="prepare-etc-test" if="etc.test.available">
    <!--
    Any files in etc/test get copied over to target/test with filtering
    applied.
    -->
    <mkdir dir="${target.test.dir}"/>
    <copy toDir="${target.test.dir}" filtering="on" failonerror="false">
      <fileset dir="${etc.test}">
        <include name="**/*"/>
        <exclude name="**/*.jar"/>
      </fileset>
    </copy>
    <copy toDir="${target.test.dir}" filtering="off" failonerror="false">
      <fileset dir="${etc.test}">
        <include name="**/*.jar"/>
      </fileset>
    </copy>
  </target>

  <available file="${etc}" property="etc.available"/>
  <target name="prepare-etc" depends="init" if="etc.available">
    <!--
    Any files in etc excluding test, main and deliverables get copied over to
    the target directory.
    -->
    <copy toDir="${target.dir}" filtering="on" failonerror="false">
      <fileset dir="${etc}">
        <exclude name="${etc.main}/*"/>
        <exclude name="${etc.test}/*"/>
        <exclude name="${etc.deliverables}/*"/>
      </fileset>
    </copy>
  </target>

  <available file="${src.main.dir}" property="src.main.available"/>
  <target name="prepare-src-main" depends="setup" if="src.main.available">
    <!--
    Any files in src/main get copied over to target/build/main with filtering
    applied.
    -->
    <mkdir dir="${target.build.main.dir}"/>
    <copy toDir="${target.build.main.dir}" filtering="on" failonerror="false">
      <fileset dir="${src.main.dir}">
        <include name="**/*"/>
        <exclude name="**/*.gif"/>
        <exclude name="**/*.png"/>
        <exclude name="**/*.jpeg"/>
        <exclude name="**/*.jpg"/>
      </fileset>
    </copy>
    <copy toDir="${target.build.main.dir}" filtering="off" failonerror="false">
      <fileset dir="${src.main.dir}">
        <include name="**/*.gif"/>
        <include name="**/*.png"/>
        <include name="**/*.jpeg"/>
        <include name="**/*.jpg"/>
      </fileset>
    </copy>
  </target>

  <available file="${src.test.dir}" property="src.test.available"/>
  <target name="prepare-src-test" if="src.test.available">
    <!--
    Any files in src/test get copied over to target/build/test with filtering
    applied.
    -->
    <mkdir dir="${target.build.test.dir}"/>
    <copy toDir="${target.build.test.dir}" filtering="on" failonerror="false">
      <fileset dir="${src.test.dir}">
        <include name="**/*"/>
        <exclude name="**/*.gif"/>
        <exclude name="**/*.png"/>
        <exclude name="**/*.jpeg"/>
        <exclude name="**/*.jpg"/>
      </fileset>
    </copy>
    <copy toDir="${target.build.test.dir}" filtering="off" failonerror="false">
      <fileset dir="${src.test.dir}">
        <include name="**/*.gif"/>
        <include name="**/*.png"/>
        <include name="**/*.jpeg"/>
        <include name="**/*.jpg"/>
      </fileset>
    </copy>
  </target>

  <target name="prepare-build-main" if="src.main.available">
    <!--
    Create the target/classes directory and copy into it anything from target/build/main
    that isn't a java source file.
    -->
    <mkdir dir="${target.classes.dir}"/>
    <copy toDir="${target.classes.dir}" failonerror="false">
      <fileset dir="${target.build.main.dir}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="prepare-build-test" if="src.test.available">
    <!--
    Create the target/test-classes directory and copy into it anything from target/build/test
    that isn't a java source file.
    -->
    <mkdir dir="${target.test-classes.dir}"/>
    <copy toDir="${target.test-classes.dir}" failonerror="false">
      <fileset dir="${target.build.test.dir}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="prepare" depends="init,prepare-etc-deliverable,prepare-etc-main,
       prepare-etc-test,prepare-etc, prepare-src-main, prepare-src-test,
       prepare-build-main, prepare-build-test">
    <tstamp/>
  </target>

  <target name="build.setup" depends="prepare" if="src.main.available">
    <available file="${target.build.main.dir}" property="build.main.available"/>
  </target>

  <target name="build" depends="build.setup,setup-path" if="build.main.available">
    <!--
    Compile sources in target/build/main with oputput classes under target/classes.
    -->
    <javac srcdir="${target.build.main.dir}" destdir="${target.classes.dir}" debug="true">
      <classpath refid="project.main.path"/>
    </javac>
  </target>

  <target name="package.setup" depends="build" if="src.main.available">
    <available file="${target.classes.dir}" property="target.classes.available"/>
  </target>

  <target name="package" depends="jar.asc"/>

  <target name="jar" depends="package.setup" if="target.classes.available">
    <mkdir dir="${target.deliverables.jars.dir}"/>
    <jar destfile="${target.deliverables.jars.dir}/${project.filename}"
       basedir="${target.classes.dir}"
       includes="**/*.class,**/*.xml,**/*.properties"
       excludes="**/*.html,**/*.gif,**/*.png">
       <manifest>
         <attribute name="Created-By" value="The Digital Product Meta Library."/>
         <attribute name="Built-By" value="${user.name}"/>
         <attribute name="Extension-Name" value="${project.name}"/>
         <attribute name="Specification-Vendor" value="DPML"/>
         <attribute name="Specification-Version" value="${project.specification.version}"/>
         <attribute name="Implementation-Vendor" value="DPML"/>
         <attribute name="Implementation-Vendor-Id" value="net.dpml"/>
         <attribute name="Implementation-Version" value="${project.version}"/>
       </manifest>
    </jar>
    <checksum fileext=".md5" file="${target.deliverables.jars.dir}/${project.filename}"/>
  </target>

  <target name="jar.check" depends="jar">
    <available file="${target.deliverables.jars.dir}/${project.filename}" property="jar.available"/>
  </target>

  <target name="jar.asc" depends="jar.check" if="jar.available">
    <antcall target="execute.jar.asc"/>
  </target>

  <target name="execute.jar.asc" if="gpg.declared">
    <echo message="Generating ASC"/>
    <delete file="${target.deliverables.jars.dir}/${project.filename}.asc"/>
    <exec executable="${project.gpg.exe}">
      <arg value="-a"/>
      <arg value="-b"/>
      <arg value="-o"/>
      <arg value="${target.deliverables.jars.dir}/${project.filename}.asc"/>
      <arg value="${target.deliverables.jars.dir}/${project.filename}"/>
    </exec>
  </target>

  <!--
  Compile the tests using the classes as the classpath and
  place results into the target/test-classes directory.
  -->
  <target name="build-tests" depends="package" if="src.test.available">
    <mkdir dir="${target.test-classes.dir}"/>
    <javac srcdir="${target.build.test.dir}"
           destdir="${target.test-classes.dir}"
           debug="true">
      <classpath refid="project.test.path"/>
    </javac>
  </target>

  <!--
  Execute any unit test.
  -->
  <target name="test" depends="build-tests" if="src.test.available">
    <mkdir dir="${target.test.dir}"/>
    <mkdir dir="${target.test-reports.dir}"/>
    <junit fork="true" dir="${basedir}"
           printsummary="yes"
           showoutput="true"
           haltonfailure="yes" failureproperty="junit.failure"
           haltonerror="yes" errorproperty="junit.error">
      <sysproperty key="build.signature" value="${build.signature}"/>
      <classpath>
        <path refid="project.test.path"/>
        <pathelement location="${target.test-classes.dir}"/>
      </classpath>
      <formatter type="plain"/>
      <formatter type="xml"/>
      <batchtest fork="yes" todir="${target.test-reports.dir}">
        <fileset dir="${target.build.test.dir}">
          <include name="**/*TestCase.java"/>
          <exclude name="**/Abstract*.java"/>
        </fileset>
      </batchtest>
    </junit>
    <!--
    <fail message="There were unittest failures." if="junit.failure" />
    <fail message="There were unittest errors." if="junit.error" />
    -->
  </target>

  <target name="install.setup" depends="test">
    <available file="${target.deliverables.dir}" property="deliverables.available"/>
  </target>

  <target name="install" depends="install.setup" if="deliverables.available">
    <!--
    Install any deliverables under the project cache relative to the project group path.
    -->
    <echo>Installing to: ${dpml.local.cache}/${project.group}</echo>
    <mkdir dir="${dpml.local.cache}/${project.group}"/>
    <copy toDir="${dpml.local.cache}/${project.group}" overwrite="true">
      <fileset dir="${target.deliverables.dir}"/>
    </copy>
  </target>

  <target name="clean">
    <delete dir="${target.dir}"/>
  </target>

</project>


