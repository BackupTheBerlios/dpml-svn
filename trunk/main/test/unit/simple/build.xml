<?xml version="1.0" encoding="UTF-8" ?>

<project name="dpml-test-simple-unit" default="install" basedir="."
    xmlns:transit="antlib:net.dpml.transit" 
    xmlns:x="plugin:dpml/magic/dpml-magic-core">

  <transit:import uri="artifact:template:dpml/magic/standard"/>

  <target name="build" depends="standard.build">
    <!--
    Simple component test part.
    This is a simple component with no dependencies.  It is used 
    primarily to validate context entry construction. It includes
    an example of a of a non-trivial custom context entry under the
    'dimension' key. In this example the context entry is an instance 
    of the class Dimension which is created with two int arguments.  
    The DefaultWidget component class accesses this via the Context 
    constructor value and uses it to calculate a size.
    -->
    <component dest="target/test/acme-simple.part" 
        xmlns="plugin:dpml/composition/dpml-composition-builder" 
        type="net.dpml.test.acme.WidgetComponent"
        name="widget">
      <context>
        <entry key="name" value="urn:component:name"/>
        <entry key="uri" value="urn:component:uri"/>
        <entry key="workingDirectory">
          <param class="java.io.File" value="urn:system:work.dir"/>
          <param value="acme/workspace"/>
        </entry>
        <entry key="dimension" class="net.dpml.test.acme.DimensionValue">
          <param class="int" value="12"/>
          <param class="int" value="100"/>
        </entry>
      </context>
    </component>

    <!--
    Simple component example.
    In this example we substitute the creation of a simple value type
    with a component as a declaration directly inside the context
    element.  This example demonstrates the mixing of different component
    strategies and the ability of a component to be handled without 
    explicit management.  The example also shows the usage of an symbolic
    system property reference passes as an argument to the working directory
    context entry value.
    -->
    <component dest="target/test/acme-widget.part" 
        xmlns="plugin:dpml/composition/dpml-composition-builder" 
        type="net.dpml.test.acme.WidgetComponent"
        name="widget">
      <context>
        <entry key="name" value="urn:component:name"/>
        <entry key="uri" value="urn:component:uri"/>
        <entry key="workingDirectory" value="$${user.dir}"/>
        <component key="dimension" type="net.dpml.test.acme.DimensionComponent">
          <context>
            <entry key="width" value="12"/>
            <entry key="height" value="100"/>
          </context>
        </component>
      </context>
    </component>

    <!--
    Example component.
    -->
    <component dest="target/test/acme-example-one.part" 
        xmlns="plugin:dpml/composition/dpml-composition-builder" 
        type="net.dpml.test.acme.ExampleComponent"
        name="demo">
      <context>
        <entry key="dimension" class="net.dpml.test.acme.DimensionValue">
          <param class="int" value="2"/>
          <param class="int" value="5"/>
        </entry>
      </context>
    </component>

    <!--
    Example component using a nested dimension component.
    -->
    <component dest="target/test/acme-example-two.part" 
        xmlns="plugin:dpml/composition/dpml-composition-builder" 
        type="net.dpml.test.acme.ExampleComponent"
        name="demo">
      <context>
        <component key="dimension" type="net.dpml.test.acme.DimensionComponent">
          <context>
            <entry key="width" value="12"/>
            <entry key="height" value="100"/>
          </context>
        </component>
      </context>
    </component>

    <!--
    Example component using an internal part.
    -->
    <component dest="target/test/acme-example-three.part" 
        xmlns="plugin:dpml/composition/dpml-composition-builder" 
        type="net.dpml.test.acme.ExampleContainer"
        name="demo">
      <parts>
        <component name="dimension" type="net.dpml.test.acme.DimensionComponent"/>
      </parts>
    </component>

    <!--
    Example component using a part by reference.
    -->
    <x:property key="dpml-test-simple" feature="uri" type="part" name="acme.uri"/>
    <component dest="target/test/acme-example-four.part" 
        xmlns="plugin:dpml/composition/dpml-composition-builder" 
        type="net.dpml.test.acme.ExampleContainer"
        name="demo">
      <parts>
        <part key="dimension" uri="${acme.uri}"/>
      </parts>
    </component>

    <!-- 
    Composite component example.
    This is a example of a composite component (the AcmeContainer class)
    with parts that it manages.  The parts include a gizmo and widget    
    component which are automatically resolved by the container and supplied
    to the AcmeContainer component via the Parts constructor argument. 
    Note that we are not including the Dimension arguments in the context
    thereby demonstrating optional context entry semantic. A feature of 
    this example is the usage of a reference element as the mechanisms
    to wire the context 'widget' part into the context supplied to the 
    'gizmo' component.  Wiring of dependencies is explicit and handled 
    by the value uri within Gizmo's context.  The reference element
    declares that the context entry for the key 'widget', supplied to 
    Gizmo shall be the selected from the 'parts' of the enclosing component
    using the name 'widget' (where the uri is in the form [scope]:[name] and
    scope may be one of 'context' or 'parts' refering respectivly to the 
    enclosing components parts or context).
    -->
    <component dest="target/test/acme-container.part"
        xmlns="plugin:dpml/composition/dpml-composition-builder" 
        type="net.dpml.test.acme.AcmeContainer"
        name="acme">
      <parts>
        <component name="widget" type="net.dpml.test.acme.WidgetComponent">
          <context>
            <entry key="workingDirectory">
              <param class="java.io.File" value="urn:system:work.dir"/>
              <param value="acme/workspace"/>
            </entry>
            <entry key="name" value="urn:component:name"/>
            <entry key="uri" value="urn:component:uri"/>
          </context>
        </component>
        <component name="gizmo" type="net.dpml.test.acme.GizmoComponent">
          <context>
            <entry key="color" value="red"/>
            <entry key="widget" uri="parts:widget"/>
          </context>
        </component>
      </parts>
    </component>

    <!--
    Composite component example.
    Using the same container as above, the following example demonstrates the 
    replacement of the DefaultWidget component with an alternative implementation
    using the SimpleWidget type.
    -->
    <component dest="target/test/acme-test-container.part"
        xmlns="plugin:dpml/composition/dpml-composition-builder" 
        type="net.dpml.test.acme.AcmeContainer"
        name="acme">
      <parts>
        <component name="widget" type="net.dpml.test.acme.SimpleWidget"/>
        <component name="gizmo" type="net.dpml.test.acme.GizmoComponent">
          <context>
            <entry key="color" value="red"/>
            <entry key="widget" uri="parts:widget"/>
          </context>
        </component>
      </parts>
    </component>

    <!--
    Example using the BadWidget
    -->
    <component dest="target/test/acme-bad-widget.part"
        xmlns="plugin:dpml/composition/dpml-composition-builder" 
        type="net.dpml.test.acme.AcmeContainer"
        name="acme">
      <parts>
        <component name="widget" type="net.dpml.test.acme.BadWidget"/>
        <component name="gizmo" type="net.dpml.test.acme.GizmoComponent">
          <context>
            <entry key="color" value="red"/>
            <entry key="widget" uri="parts:widget"/>
          </context>
        </component>
      </parts>
    </component>

  </target>

  <target name="package" depends="build"/>
  <target name="install" depends="test"/>

</project>
