<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright 2005 Stephen J. McConnell

  Licensed  under the  Apache License,  Version 2.0  (the "License");
  you may not use  this file  except in  compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed  under the  License is distributed on an "AS IS" BASIS,
  WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
  implied.

  See the License for the specific language governing permissions and
  limitations under the License.
-->

<project name="dpml-metro-test" default="install"
    xmlns:transit="antlib:net.dpml.transit" 
    xmlns:x="dpml:depot" 
    xmlns:c="dpml:metro" >

  <transit:import uri="local:template:dpml/tools/standard"/>

  <target name="prepare" depends="standard.prepare">
    <x:plugin uri="link:plugin:dpml/depot/dpml-depot-convert">
      <task name="convert" class="de.java2html.anttasks.Java2HtmlTask"/>
    </x:plugin>
    <convert srcdir="target/build/main" destdir="target/reports/src"/>
    <convert srcdir="target/build/test" destdir="target/reports/src"/>
  </target>

  <target name="build" depends="standard.build">

    <rmic base="${project.target.classes.main.dir}" classpathref="project.compile.path">
      <include name="**/ManagedComponent#DefaultMonitor.class"/>
    </rmic>

    <x:plugin uri="link:plugin:dpml/metro/dpml-metro-tools"/>

    <!-- create the test component types -->

    <c:type class="net.dpml.test.ExampleComponent" name="example">
      <state>
        <trigger event="initialization">
          <transition name="init" target="available"/>
        </trigger>
        <state name="available">
          <trigger event="termination">
            <transition name="terminate" target="../terminated"/>
          </trigger>
        </state>
        <state name="terminated" terminal="true"/>
      </state>
    </c:type>
    <c:type class="net.dpml.test.ObserverComponent" name="observer">
      <state>
        <trigger event="initialization">
          <transition name="init" target="available"/>
        </trigger>
        <state name="available">
          <trigger event="termination">
            <transition name="terminate" target="../terminated"/>
          </trigger>
        </state>
        <state name="terminated" terminal="true"/>
      </state>
    </c:type>
    <c:type class="net.dpml.test.SingletonComponent" name="example" threadsafe="true"/>
    <c:type class="net.dpml.test.ContextTestComponent" name="context" threadsafe="true"/>

    <!-- create test components -->

    <c:component dest="target/test/example.part" test="true"
        type="net.dpml.test.ExampleComponent" name="example">
      <context>
        <entry key="color" method="RED"/>
      </context>
    </c:component>

    <c:component dest="target/test/observer.part" test="true"
        type="net.dpml.test.ObserverComponent">
      <context>
        <entry key="color" method="RED"/>
      </context>
    </c:component>

    <c:component dest="target/test/example-2.part" test="true"
        type="net.dpml.test.ExampleComponent" name="transient" collection="SOFT" lifestyle="transient">
      <context>
        <entry key="color">
          <value class="int" value="100"/>
          <value class="int" value="200"/>
          <value class="int" value="0"/>
        </entry>
      </context>
    </c:component>

    <c:component dest="target/test/example-3.part" test="true"
        type="net.dpml.test.SingletonComponent" name="singleton" collection="weak">
      <context>
        <entry key="color" method="RED"/>
      </context>
    </c:component>

    <c:component dest="target/test/example-4.part" test="true"
        type="net.dpml.test.SingletonComponent" name="singleton" collection="hard">
      <context>
        <entry key="color" method="RED"/>
      </context>
    </c:component>

    <c:component dest="target/test/context.part" test="true"
        type="net.dpml.test.ContextTestComponent" name="context" collection="soft">
      <context>
        <entry key="color" method="RED"/>
        <entry key="integer" value="0"/>
        <entry key="short" value="0"/>
        <entry key="long" value="0"/>
        <entry key="byte" value="0"/>
        <entry key="double" value="0"/>
        <entry key="float" value="0.5"/>
        <entry key="char" value="x"/>
        <entry key="boolean" value="true"/>
        <entry key="file" value="$${work}"/>
        <entry key="tempFile" value="$${temp}"/>
        <entry key="URI" value="$${uri}"/>
        <entry key="name" value="$${name}"/>
        <entry key="path" value="$${path}"/>
      </context>
    </c:component>

    <!-- create the composite component -->

    <types xmlns="dpml:metro">
      <type class="net.dpml.test.composite.ChildComponent" name="child"/>
      <type class="net.dpml.test.composite.CompositeComponent" name="parent">
        <parts>
          <component type="net.dpml.test.composite.ChildComponent" key="child">
            <context>
              <entry key="color" method="BLUE"/>
            </context>
          </component>
        </parts>
      </type>
      <type class="net.dpml.test.composite.PartsComponent" name="parent">
        <parts>
          <component type="net.dpml.test.composite.ChildComponent" key="child">
            <context>
              <entry key="color" method="BLUE"/>
            </context>
          </component>
        </parts>
      </type>
    </types>

    <c:component dest="target/test/composite.part" test="true" 
        type="net.dpml.test.composite.CompositeComponent" collection="hard">
      <context>
        <entry key="color" method="RED"/>
      </context>
    </c:component>

    <c:component dest="target/test/parts.part" test="true" 
        type="net.dpml.test.composite.PartsComponent" collection="hard">
      <context>
        <entry key="color" method="RED"/>
      </context>
    </c:component>

    <!-- create the lifecycle managed component -->

    <c:type class="net.dpml.test.lifecycle.StartableComponent" name="lifecycle">
      <state>
        <trigger event="initialization">
          <transition name="init" target="started">
            <operation name="startup" method="start"/>
          </transition>
        </trigger>
        <state name="started">
          <transition name="stop" target="../stopped">
            <operation name="stop" method="stop"/>
          </transition>
          <trigger event="termination">
            <apply id="stop"/>
          </trigger>
        </state>
        <state name="stopped">
          <transition name="start" target="../started">
            <operation name="start" method="start"/>
          </transition>
        </state>
      </state>
    </c:type>

    <c:component dest="target/test/lifecycle.part" test="true" 
        type="net.dpml.test.lifecycle.StartableComponent" collection="hard">
    </c:component>

    <!-- categories component -->

    <c:type class="net.dpml.test.categories.CategoriesComponent" name="categories" lifestyle="thread"/>
    <c:component dest="target/test/categories.part" test="true" activation="STARTUP"
        type="net.dpml.test.categories.CategoriesComponent" collection="hard">
      <categories>
        <category name="alpha" priority="warn"/>
        <category name="beta" priority="error"/>
      </categories>
    </c:component>

    <!-- configuration component -->

    <c:type class="net.dpml.test.config.ConfigurableComponent" name="config" lifestyle="thread"/>
    <c:component dest="target/test/config.part" test="true" activation="STARTUP"
        type="net.dpml.test.config.ConfigurableComponent" collection="hard">
      <configuration name="fred">
        <place>Cafe de'Orleans</place>
        <item name="breakfast" value="Cafe et Crossant"/>
        <item name="lunch" value="Salade de Sub-Oust"/>
        <item name="dinner" value="Margret de Canard"/>
      </configuration>
    </c:component>

    <!-- parameterizable component -->

    <c:type class="net.dpml.test.params.ParameterizableComponent" name="params" lifestyle="thread"/>
    <c:component dest="target/test/params.part" test="true" activation="STARTUP"
        type="net.dpml.test.params.ParameterizableComponent" collection="hard">
      <parameters>
        <param name="name" value="fred"/>
        <param name="size" value="1024"/>
      </parameters>
    </c:component>

    <!-- composite app-->

    <c:types>
      <type name="server" class="net.dpml.test.app.DefaultServer" lifestyle="singleton"/>
      <type name="listener" class="net.dpml.test.app.DefaultListener" lifestyle="singleton"/>
      <type name="demo" class="net.dpml.test.app.Demo" lifestyle="singleton">
        <parts>
          <component key="server" type="net.dpml.test.app.DefaultServer" >
            <context>
              <entry key="port" value="1010"/>
            </context>
          </component>
          <component key="listener" type="net.dpml.test.app.DefaultListener" >
            <context>
              <entry key="server" lookup="net.dpml.test.app.Server"/>
            </context>
          </component>
        </parts>
      </type>
    </c:types>

    <c:component type="net.dpml.test.app.Demo" 
      dest="target/test/application.part" test="true" collection="hard"/>

    <!-- operations test -->

    <c:type class="net.dpml.test.state.ManagedComponent" name="demo" lifestyle="thread">
      <state>
        <operation name="ping" method="ping"/>
        <operation name="monitor"/>
      </state>
    </c:type>

    <c:component dest="target/test/state.part" test="true" activation="STARTUP"
        type="net.dpml.test.state.ManagedComponent" collection="hard"/>

  </target>

  <target name="install" depends="standard.install">
    <c:catalog title="Test Catalog">
      <fileset dir="${basedir}">
        <include name="**/target/classes/main/**/*.type"/>
      </fileset>
    </c:catalog>
  </target>

</project>


