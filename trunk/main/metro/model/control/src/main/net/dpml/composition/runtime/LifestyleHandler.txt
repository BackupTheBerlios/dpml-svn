/* 
 * Copyright 2004 Stephen J. McConnell.
 *
 * Licensed  under the  Apache License,  Version 2.0  (the "License");
 * you may not use  this file  except in  compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed  under the  License is distributed on an "AS IS" BASIS,
 * WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 * implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.dpml.composition.runtime;

import java.net.URI;
import java.rmi.RemoteException;

import net.dpml.logging.Logger;

import net.dpml.part.control.ControlRuntimeException;

/**
 * A lifestyle handler provides support for the aquisition and release
 * of component instances.  An implementation is responsible for the  
 * handling of new instance creation based on lifestyle policy declared
 * in a component model.
 *
 * @author <a href="mailto:dev-dpml@lists.ibiblio.org">The Digital Product Meta Library</a>
 * @version $Id: LifestyleManager.java 259 2004-10-30 07:24:40Z mcconnell $
 */
class LifestyleHandler
{
    private Logger m_logger;
    private ComponentController m_controller;

    LifestyleHandler( Logger logger, ComponentController controller )
    {
        m_logger = logger;
        m_controller = controller;
    }

    /**
     * Aquire a key to an instance.
     *
     * @param model the model from which new or existing instances will be resolved
     * @return the key to the resolved instance
     */
    public ComponentHandler aquire( ComponentHandler component, CompositionModel model )
    {
        final String lifestyle = model.getLifestylePolicy();
        if( getLogger().isDebugEnabled() )
        {
            URI uri = model.getURI();
            final String message = 
              "Aquiring an object key for the model ["
              + uri
              + "] using the lifestyle [" 
              + lifestyle
              + "].";
            getLogger().debug( message );
        }
        if( "request".equals( lifestyle ) || "transient".equals( lifestyle ) )
        {
            synchronized( model )
            {
                ComponentHandler entry = new ComponentHandler( m_logger, m_controller, model, null );
                Object key = entry.getKey();
                if( getLogger().isDebugEnabled() )
                {
                    final String message = 
                      "Established key ["
                      + entry.getURI() 
                      + "].";
                    getLogger().debug( message );
                }
                table.add( entry );
                return entry;
            }
        }
        else if( "model".equals( lifestyle ) || "singleton".equals( lifestyle ) )
        {
            synchronized( model )
            {
                String key = CompositionController.SELF;
                return aquire( table, model, key );
            }
        }
        else if( "thread".equals( lifestyle ) )
        {
            throw new UnsupportedOperationException( "thread" );
        }
        else
        {
            final String error = 
              "Lifestyle policy ["
              + lifestyle
              + "] is not recognized.";
            throw new IllegalArgumentException( error );
        }
    }

    /**
     * Aquire a key to an instance. If the supplied key references an 
     * existing instance the same key is returned.  If the key does not
     * reference an existing instance then a new instance is created, 
     * registered with the model, and the key returned.
     *
     * @param model the model from which new or existing instances will be resolved
     * @return the key to the resolved instance
     */
    public ComponentHandler aquire( ComponentTable table, CompositionModel model, Object key ) 
    {
        if( null == model )
        {
            throw new NullPointerException( "model" );
        }
        if( null == key )
        {
            throw new NullPointerException( "key" );
        }

        ComponentHandler entry = table.get( key );

        if( null == entry )
        {
            if( getLogger().isDebugEnabled() )
            {
                URI uri = model.getURI();
                final String message = 
                  "Initiating creation of identifiable instance in ["
                  + uri
                  + "].";
                getLogger().debug( message );
            }
            entry = new ComponentHandler( m_logger, m_controller, model, key );
            if( getLogger().isDebugEnabled() )
            {
                final String message = 
                  "Adding component entry ["
                  + entry.getURI() 
                  + "].";
                getLogger().debug( message );
            }
            table.add( entry );
        }
        else
        {
            if( getLogger().isDebugEnabled() )
            {
                final String message = 
                  "Using existing component entry ["
                  + entry.getURI() 
                  + "].";
                getLogger().debug( message );
            }
        }
        return entry;
    }

    public void release( ComponentTable table, CompositionModel model, Object key )
    {
        final String lifestyle = model.getLifestylePolicy();
        if( getLogger().isDebugEnabled() )
        {
            final String message = 
              "Releasing ["
              + model.getURI() 
              + "#" 
              + key 
              + "].";
            getLogger().debug( message );
        }
        table.remove( key );
    }

    private Logger getLogger()
    {
        return m_logger;
    }

}
