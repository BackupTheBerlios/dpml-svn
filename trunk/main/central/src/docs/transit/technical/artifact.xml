<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 Copyright 2005 Stephen McConnell
 Copyright 2004 Niclas Hedhman

 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at

   http://www.dpml.net/central/about/legal/

 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.

 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>
  <properties>
    <author email="niclas@hedhman.org">Niclas Hedhman</author>
    <title>DPML Transit Artifact Protocol</title>
  </properties>

  <body>
    <section name="Artifact Protocol">

      <p>
        The key to the repository comes through the artifact protocol. It
        makes a separation of concern between the requested resource and the
        location where such a resource can be found. The location is handled
        by a the protocol handler, and is configured by the user. In reality,
        once DPML Transit is in place, it is possible to request any type of
        resource via the familiar java.net.URL() and many existing
        applications can easily be made <strong>repository enabled</strong>
        just by providing DPML Transit in the classpath and setting one or
        two system properties.
      </p>

      <subsection name="Tutorial">

        <table>
          <tr>
            <td><img src="/images/info.gif"/></td>
            <td><i>See <a href="http://www.osm.net/training/resources/artifacts.html">
               OSM Tutorial on Transit Artifacts</a>.</i>
            </td>
          </tr>
        </table>

      </subsection>

      <subsection name="Specification">
        <p>
          The official specification of the artifact protocol is as follows;
        </p>
<source> artifact:[type]:[group]/[name]#[version] </source>
      </subsection>

      <table>
        <tr>
          <td>
            type
          </td>
          <td>
            The type of the artifact. Typical example would be "jar", "png"
            or "dtd".
          </td>
        </tr>
        <tr>
          <td>
            group
          </td>
          <td>
            The group to which the artifact belong, so that naming conflicts
            can be avoided.
            It is recommended that the group is multi-leveled and slash
            separated, where the top level denotes the distinguishable name of
            the organization.
          </td>
        </tr>
        <tr>
          <td>
            name
          </td>
          <td>
            The name of the artifact.
          </td>
        </tr>
        <tr>
          <td>
            version
          </td>
          <td>
            The version is an opaque identifier without any built-in semantic
            contract. That means that Transit places no meaning into the
            version itself, and 1.1.0 and 1.1.1 does not hint that the latter
            can be used if the former is not present.
          </td>
        </tr>
      </table>
      <subsection name="Using an artifact URL" >
        <p>
          Using artifact URLs are no different from any http or ftp URLs. You
          create them by instantiating the <code>java.net.URL</code> class,
          and setting the protocol to "artifact" (no quotes).
        </p>
        <p>
          The following example artifact URI identifies a resource named
          "dpml-http-server" associated with the "dpml/http" group, a
          resource type called "part" and a version value of "1024".
        </p>

        <source>artifact:part:dpml/http/dpml-http-server#1024</source>

      </subsection>

    </section>
  </body>
</document>



