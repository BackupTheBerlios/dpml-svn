<?xml version="1.0" encoding="UTF-8"?>

<document>

  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Build System</title>
  </properties> 

  <body>

    <section name="Modules">

      <p>
      A module can be viewed as a collection of resources and projects 
      that share a common group name.  In effect a module establishes a 
      unique namespace for the resources contained within it.  A module
      can contain its own <tt>type</tt> declarations together with 
      nested <tt>resource</tt>, <tt>project</tt> and subsidiary 
      <tt>module</tt> delcarations.
      </p>

      <p>
      Functionally a module can be view as a resource or project in that
      a module can declare a <tt>basedir</tt> and produced <tt>types</tt>.
      The enables a module to be used as a source for the production of
      module related information (such as a module descriptor or module 
      documentation).
      </p>

      <subsection name="XML Attributes on Embedded Modules">

         <p>
         The following attributes may be declared when declaring a 
         module within the library <tt>&lt;modules&gt;</tt> element or within
         another enclosing <tt>&lt;module&gt;</tt>
         </p>
      
         <table>
           <tr>
             <td>name</td>
             <td>The module name (required). A module path is made up of the sequence 
              of modules names of any parent modules and the immediate module 
              name.</td>
           </tr>
           <tr>
             <td>basedir</td>
             <td>Optional base directory of the module.</td>
           </tr>
         </table>

      </subsection>

      <subsection name="XML Attributes on Module Includes">

         <p>
         An alternative form of module defintion is supported whereby 
         a <tt>base</tt> attribute reference a relative directory containing
         a file named <tt>module.xml</tt>.  In this scenario the module 
         <tt>basedir</tt> is implied by the base value and the module <tt>name</tt>
         is resolved from the imported module.xml root <tt>&lt;module&gt;</tt> 
         element.  This second form of module addition is convinient when you are 
         dealing with a large number of projects and separation of modules into 
         individual module files in more convinient.
         </p>
      
         <table>
           <tr>
             <td>base</td>
             <td>A path relative to the enclosing module or library basedir 
              containing a file name <tt>module.xml</tt> which itself contains
              a root <tt>&lt;module&gt;</tt> element.</td>
           </tr>
         </table>

      </subsection>

      <subsection name="XML Nested elements">
      
         <table>
           <tr>
             <td>types</td>
             <td>0..1</td>
             <td>Declaration of a set of resource <a href="types.html">types</a> 
                associated with the module.</td>
           </tr>
           <tr>
             <td>resource</td>
             <td>0..n</td>
             <td>A <a href="resources/index.html">resource</a> declaration.</td>
           </tr>
           <tr>
             <td>project</td>
             <td>0..n</td>
             <td>A <a href="projects/index.html">project</a> declaration.</td>
           </tr>
           <tr>
             <td>module</td>
             <td>0..n</td>
             <td>A nested <a href="index.html">module</a> declaration.</td>
           </tr>
         </table>

      </subsection>

    </section>

    <section name="Examples">

      <subsection name="Embedded Module Declaration">

      <p>
      The following example demonstrates the declaration of a single module 
      directly within a library.  The module declares the name 'demo' and 
      base directory corresponding to the same directory that the library is 
      located within.  The module contains a single project named 'example'.
      </p>

<source><![CDATA[
<library>

  <properties>
    <property name="project.builder.uri" value="link:plugin:dpml/tools/dpml-tools-builder"/>
    <property name="project.standard.template" value="local:template:dpml/tools/standard"/>
    <property name="project.template" value="${project.standard.template}"/>
  </properties>

  <modules>
    <module name="demo" basedir=".">
      <project name="example" basedir="example">
        <types>
          <type id="jar"/>
        </types>
        <dependencies>
          <include urn="artifact:jar:commons-collections/commons-collections#3.0"/>
        </dependencies>
      </project>
    </module>
  </modules>

</library>

]]></source>

      </subsection>

      <subsection name="Imported Module Declaration">

      <p>
      The following example demonstrates the inclusion of a series of external 
      files named <tt>module.xml</tt> as the definition of a set of modules.  The 
      example declares a root module named 'dpml'.  A set of <tt>module</tt> elements
      delcarations reference external modules for 'transit', 'metro', 'depot', 
      and 'util'.  In each case the the directory referenced by the base attribute
      contains a file named <tt>module.xml</tt>.
      </p>

<source><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1"?>

<library>

  <imports>
    <import uri="link:module:junit"/>
    <import uri="link:module:ant"/>
    <import uri="link:module:jgoodies"/>
  </imports>

  <modules>

    <module name="dpml" basedir=".">

      <types>
        <type id="module" alias="true"/>
      </types>

      <properties>
        <property name="project.publisher.name" value="Digital Product Meta Library"/>
        <property name="project.specification.vendor" value="${project.publisher.name}"/>
        <property name="project.implementation.vendor" value="${project.publisher.name}"/>
        <property name="project.implementation.vendor-id" value="net.dpml"/>
        <property name="project.publisher.url" value="http://www.dpml.net"/>
        <property name="project.resource.host" value="http://repository.dpml.net"/>
        <property name="project.api.host" value="http://api.dpml.net"/>
        <property name="project.svn.host" value="svn://svn.berlios.de/dpml/trunk/main"/>
      </properties>

      <module base="transit"/>
      <module base="metro"/>
      <module base="depot"/>
      <module base="util"/>

      <project name="central" basedir="central"/>
   
    </module>

  </modules>

</library>

]]></source>

        <p>
        The following XML is an example of an imported <tt>module.xml</tt> file.  The example 
        used below is the DPML Depot Module. The module itself declares that it produced the 'module'
        resource type (an portable module artifact) and a series of project defintions.
        </p>

<source><![CDATA[
<module name="depot">
   
  <types>
    <type id="module" alias="true"/>
  </types>
   
  <resource name="dpml-library-main" basedir="library/common">
    <types>
      <type id="jar"/>
    </types>
    <dependencies>
      <include ref="dpml/transit/dpml-transit-main"/>
    </dependencies>
    <dependencies scope="test">
      <include ref="ant/ant-junit"/>
    </dependencies>
  </resource>

  <project name="dpml-library-console" basedir="library/console">
    <types>
      <type id="jar"/>
      <type id="plugin" alias="true">
        <property name="project.plugin.class" 
           value="net.dpml.library.console.BuilderPlugin"/>
      </type>
    </types>
    <dependencies>
      <include ref="dpml/util/dpml-util-cli"/>
      <include ref="dpml/transit/dpml-transit-main"/>
      <include ref="dpml/depot/dpml-library-main"/>
    </dependencies>
    <dependencies scope="test">
      <include ref="ant/ant-junit"/>
    </dependencies>
  </project>
      
  <resource name="dpml-tools-builder" basedir="tools/builder">
    <types>
      <type id="jar"/>
      <type id="plugin" alias="true">
        <property name="project.plugin.class" 
          value="net.dpml.tools.impl.StandardBuilder"/>
      </type>
    </types>
    <dependencies>
      <include key="dpml-library-main"/>
      <include ref="dpml/transit/dpml-transit-tools"/>
      <include ref="ant/ant-junit" tag="system"/>
      <include ref="ant/ant" tag="system"/>
      <include ref="ant/ant-xslp" tag="system"/>
      <include ref="ant/ant-trax" tag="system"/>
    </dependencies>
  </resource>

  <project name="dpml-depot-checkstyle" basedir="tools/checkstyle">
    <types>
      <type id="jar"/>
      <type id="plugin" alias="true">
        <property name="project.plugin.resource" 
          value="net/dpml/builder/checkstyle/antlib.xml"/>
        <property name="project.plugin.urn" 
          value="dpml:checkstyle"/>
      </type>
    </types>
    <dependencies>
      <include ref="dpml/depot/dpml-tools-builder"/>
      <include urn="artifact:jar:checkstyle/checkstyle#3.5">
        <property name="project.api.host" value="http://api.dpml.net"/>
        <property name="project.api.root" value="${project.api.host}/${group}/${version}"/>
      </include>
      <include urn="artifact:jar:regexp/regexp#1.3" />
      <include urn="artifact:jar:commons-logging/commons-logging#1.0.4" />
      <include urn="artifact:jar:commons-collections/commons-collections#3.1" />
      <include urn="artifact:jar:commons-beanutils/commons-beanutils-core#1.7.0" />
      <include urn="artifact:jar:bcel/bcel#5.1" />
      <include urn="artifact:jar:antlr/antlr#2.7.2" />
    </dependencies>
  </project>

  <project name="dpml-depot-console" basedir="core/console">
    <types>
      <type id="jar"/>
    </types>
    <properties>
      <property name="project.jar.main.class" value="net.dpml.depot.Main"/>
    </properties>
    <dependencies>
      <include ref="dpml/transit/dpml-transit-main"/>
    </dependencies>
    <dependencies scope="test">
      <include ref="ant/ant-junit"/>
    </dependencies>
  </project>

</module>
]]></source>

      </subsection>

    </section>

  </body>

</document>

