<?xml version="1.0" encoding="UTF-8"?>

<document>

  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Metro</title>
  </properties> 

  <body>

    <section name="Models">

      <p>
      Within the Metro system there is a distinct separation between 
      the model of a component, the component runtime machinery, and 
      the component implementation.  The component model is a remotely
      accessible object through which the runtime machinery can access
      configuration information about a component.  The runtime machinery
      basically handles concerns such as assembly, deployment, 
      decommissioning and so forth.
      </p>

      <p>
      A component model is created using the standard <a href="controller/index.html">
      controller</a>.
      </p>

      <pre>
Controller controller = Controller.STANDARD;
URI uri = new URI( "artifact:part:acme/acme-widget#1.1" );
<font color="darkred">Model model = controller.createModel( uri );</font>
Component component = controller.createComponent( model );
      </pre>

      <p>
      Note that the model returned from the controller is remotable and as 
      such the system handling model configuration may be executing in a 
      different virtual machine to the component runtime.  Equally, a 
      component deployment system can register a model with a central 
      management system (as is the case with the Station manager).
      </p>

      <p>
      The Metro system defines a number of extended model interfaces that
      allow control of aspects of the component and context model.  These
      interfaces are described below - however, please note that these 
      interfaces are specific to the Metro platform and will not be recognized
      by generic systems based strictly on the Part API.
      </p>

      <subsection name="ComponentModel">

      <p>
      The <a href="/api/dpml/@VERSION@/net/dpml/metro/model/ComponentModel.html">
      net.dpml.metro.model.ComponentModel</a> interface exposes information about 
      a component configuration.
      The <a href="/api/dpml/@VERSION@/net/dpml/metro/model/MutableComponentModel.html">
      net.dpml.metro.model.MutableComponentModel</a> interface 
      includes additional operations dealing with model changes.
      </p>

      <p>
      Attributes exposed by the <tt>ComponentModel</tt> interface:
      </p>

      <ul>
        <li>the component name</li>
        <li>the component implementation classname</li>
        <li>activation policy</li>
        <li>lifestyle policy</li>
        <li>garbage collection policy</li>
        <li>classloader chain definition</li>
        <li>keys to internal parts</li>
        <li>access to the component models of internal parts</li>
        <li>logging category priority assignments</li>
        <li>assigned configuration and/or parameterization data</li>
        <li>the context model</li>
      </ul>

      </subsection>

      <subsection name="ContextModel">

      <p>
      The <a href="/api/dpml/@VERSION@/net/dpml/metro/model/ContextModel.html">
      net.dpml.metro.model.ContextModel</a> interface 
      exposes information about a context settings - specifically the 
      binding of context keys to context value directives.  The 
      <a href="/api/dpml/@VERSION@/net/dpml/metro/model/MutableContextModel.html">
      net.dpml.metro.modelMutableContextModel</a> provides support for context entry 
      modification.
      </p>

      </subsection>

    </section>

    <section name="Technical Note">

      <p>
      Interfaces described here are subject to change. In particular 
      listener addition and removal operations are required, together 
      with operations dealing with constructor parameter factory 
      configuration.
      </p>

    </section>

  </body>

</document>

