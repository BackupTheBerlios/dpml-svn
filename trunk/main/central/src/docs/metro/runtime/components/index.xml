<?xml version="1.0" encoding="UTF-8"?>

<document>

  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Metro</title>
  </properties> 

  <body>

    <section name="Components">

      <p>
      A <tt>Component</tt> is a remotely reachable object that is established using a data 
      <tt><a href="/api/dpml/@VERSION@/net/dpml/metro/part/Model.html">Model</a></tt>. 
      Component and model implementations are established via a <tt>Controller</tt>. 
      A controller is selected based on meta-data included in a stand-alone <tt>part</tt>
      datastructure.  All components implement the common
      <a href="/api/dpml/@VERSION@/net/dpml/metro/part/Component.html">Component</a>
      interface dealing with:
      </p>

      <ul>
        <li>activation: handles assembly of the component</li>
        <li>lookup: used for resolving potential service providers during assembly</li>
        <li>provider: access to runtime service providers</li>
      </ul>

      <subsection name="ComponentHandler">

        <p>
        The <tt>net.dpml.metro.runtime.ComponentHandler</tt> class is the reference implementation
        of the <tt>Component</tt> interface.  It is created by the <tt>CompositionController</tt> 
        using either an implicit or explicit remotely accessible <tt>ComponentModel</tt> that 
        aggregates information about a component <tt>type</tt> and deployment solution.
        </p>

        <p>
        Following the separation of model and control concerns, the <tt>ComponentHandler</tt> has 
        as associated class controller to which a majority of functional concerns are delegated.
        This internal controller deals with the establishment of the lifestyle handler taking into 
        account lifestyle and collection policies declared under the <tt>ComponentModel</tt>.  
        The <tt>ComponentHandler</tt> maintains a map of objects implementing the 
        <tt>net.dpml.part.Instance</tt> interface.  This map representes the collection of 
        runtime service providers bound to the type/directive combination. 
        </p>

      </subsection>

      <subsection name="Handler Configuration">

        <p>
        Creation of a new <tt>Component</tt> is managed exclusively by the top-level
        <a href="../controller/index.html">controller</a>.  An new component may be created
        via a reference to a network accessible part, or alternatively via a reference to a 
        remote component model. An example of a management system leveraging model-based 
        creation is the DPML <a href="../../station/index.html">Station</a> wherein 
        configuration data is established relative to the component type, deployment 
        profile, and subsequent modified by the Station CLI.
        </p>

        <p>
        The actual implementation class that is established is a function of the controller
        declared in a part definition.  This mechanism enables the concurrent deployment of 
        different back-end controller implementations.  This in-turn enables the potential 
        deployment of components associated with not-yet-created controller implementations.   
        Inversely, an existing controller can incorproate components based on legacy 
        implementations.
        </p>

      </subsection>

    </section>

  </body>

</document>

