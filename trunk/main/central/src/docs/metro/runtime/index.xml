<?xml version="1.0" encoding="UTF-8"?>

<document>

  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Metro</title>
  </properties> 

  <body>

    <section name="Metro Runtime">

      <p>
      The Metro runtime is a local controller that provides support for the 
      construction of a managed <tt><a href="components/index.html">Component</a></tt>.
      A <tt>Component</tt> encapsulates a component <a href="types/index.html">
      type</a> and deployment configuration <a href="profiles/index.html">profile</a>.
      </p>

      <subsection name="Types and Profiles">

      <p>
      One of the design objectives for Metro was to leverage build-time
      validation of a component definition enabaling a lighter, 
      faster, and more reliable runtime implementation.  This led to 
      the development of a series of build tools supporting the 
      generation of the following datastructures:
      </p>

      <ul>
        <li>
          <a href="types/index.html">component type:</a> 
          located under a &lt;classname&gt;.type - a serializable datatype 
          containing information about a component class including characteristics 
          such as the services provided by the component, the context 
          assumptions asserted by the implementation, logging assumptions
          and defaults, etc.  This information is cached under the 
          <tt>.type</tt> resource (an XML document encoded to JSR-57) for 
          later use by deployment tools and the runtime system.
        </li>
        <li>
          <a href="profiles/index.html">component profile:</a> 
          a standalone component definition referencable via the <tt>artifact</tt>
          uri using the <tt>part</tt> type identifier.  The part definition contains 
          the default deployment profile for a component including the definition of 
          the component inital context, dependency solutions, and any related 
          configuration information.  The <tt>part</tt> serves as the initial data 
          used to establish a component model.
        </li>
      </ul>

      </subsection>

      <subsection name="Components and Instances">

        <p>
        Using a network accessible part definition, the Metro runtime provides
        support for the creation of a <tt>Component</tt>.  The <tt>Component</tt>
        handles requests for locating service providers and establishment of 
        managed <tt>Instance</tt>s.
        </p>

        <ul>
          <li>part controller: general utility to construct directives from network  
              accessible resources and handles creation of locally or remotely managed 
              components.</li>
          <li>component handler: encapsulates a deployment configuration applied to a
              component type.  Uses an associated lifestyle policy to control establishment
              of managed instances.</li>
          <li>instance manager: handles provider establishment, runtime state management, and 
              provider decommissioning.</li>
        </ul>

      </subsection>

      <subsection name="Example">
      
        <p>
        The following snipet of code demonstrates the creation of a component:
        </p>

        <pre>
Controller controller = Controller.STANDARD;
URI uri = new URI( "artifact:part:acme/acme-widget#1.1" );
Component component = controller.getComponent( uri );
Instance instance = component.getInstance();
Widget widget = (Widget) instance.getValue( true );
        </pre>

      </subsection>

    </section>

  </body>

</document>

