<?xml version="1.0" encoding="UTF-8"?>

<document>

  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Build System</title>
  </properties> 

  <body>

    <section name="Component Types">

      <subsection name="Description">

        <p>
        The types task automates the creation of component type meta-info.
        Information captured during type creation includes the component 
        implementation class name, logging channel assumptions, the services
        provided by the type, context assumptions, and internal parts.
        </p>

      </subsection>
      
      <subsection name="Attributes">

        <table>
          <tr>
            <td><tt>name</tt></td>
            <td>Set the type name - used internally in error reports.</td>
          </tr>
          <tr>
            <td><tt>class</tt></td>
            <td>Set the component implementation class.</td>
          </tr>
          <tr>
            <td><tt>lifestyle</tt></td>
            <td>Set the component lifestyle. Allowable values include  
              <tt>SINGLETON</tt>, <tt>THREAD</tt>, and <tt>TRANSIENT</tt>.
              A component declaring the <tt>SINGLETON</tt> will be shared
              across all consumers within the JVM (i.e. the potential 
              for concurrent access will exist).  A component declaring 
              the <tt>THREAD</tt> lifestyle policy will have a set of instances
              corresponding to the number of threads requesting access. A 
              component declaring the <tt>TRANSIENT</tt> lifestyle will 
              instantiated for each request.  The default lifestyle policy
              is <tt>TRANSIENT</tt> (reflecting the most conservative 
              scenario).</td>
          </tr>
          <tr>
            <td><tt>collection</tt></td>
            <td>Sets the component garbage collection policy.  Allowable
             values include <tt>WEAK</tt>, <tt>SOFT</tt> and <tt>HARD</tt>.
             A component declaring a <tt>WEAK</tt> collection policy will 
             be garbage collected at the discretion of the JVM.  A component
             declaring a <tt>SOFT</tt> collection policy will be garbage 
             collected in the event of memory contention.  A component 
             declaring the <tt>HARD</tt> collection policy will remain in 
             memory for the lifetime of the JVM unless explicitly removed
             via a management system or controlling application.</td>
          </tr>
          <tr>
            <td><tt>threadsafe</tt></td>
            <td>Declares the component implementation as threadsafe.</td>
          </tr>
        </table>

      </subsection>

      <subsection name="Nested Elements">

        <table>
          <tr>
            <td><tt>parts</tt></td>
            <td>The parts element may contain 0..n embedded 
              <a href="../components/index.html">component</a>
              defintions.  Components embedded within a type are 
              structural parts of the component type.</td>
          </tr>
        </table>

      </subsection>

    </section>

    <section name="Example">

        <subsection name="Type Example">

        <p>Example using the <tt>&lt;type&gt;</tt> task to generate
          a series of <tt>.type</tt> descriptors:</p>

<pre><![CDATA[
<type xmlns="dpml:metro" class="net.dpml.test.composite.ChildComponent" name="child"/>
<type xmlns="dpml:metro" class="net.dpml.test.composite.CompositeComponent" name="parent">
  <parts>
    <component type="net.dpml.test.composite.ChildComponent" name="child" activation="false">
      <context>
        <entry key="color" method="BLUE"/>
      </context>
    </component>
  </parts>
</type>
]]></pre>

        </subsection>

        <subsection name="Optimization using the Types task">

        <p>
        The above usage of the <tt>&lt;type&gt;</tt> task can be optimised through the 
        usage of the <tt>&lt;types&gt;</tt>.  The <tt>&lt;types&gt;</tt> tasks reduces the 
        overhead during construction of runtime classloader information.  When generating types 
        using the <tt>&lt;types&gt;</tt> task the classloader construction is only executed 
        once.  The following example is an optimized equivalent of the above.
        </p>

<pre><![CDATA[
<types xmlns="dpml:metro">
  <type class="net.dpml.test.composite.ChildComponent" name="child"/>
  <type class="net.dpml.test.composite.CompositeComponent" name="parent">
    <parts>
      <component type="net.dpml.test.composite.ChildComponent" name="child" activation="false">
        <context>
          <entry key="color" method="BLUE"/>
        </context>
      </component>
    </parts>
  </type>
</types>
]]></pre>

        </subsection>

    </section>

    <section name="Technical Notes">

      <subsection name="Issues and Limitations">

        <p>
        The implementation does not currently provide support for the 
        overriding of published services or the delcaration of 
        logging channel usage assumptions within the component 
        implementation.
        </p>

      </subsection>
      
      <subsection name="Persistence">

        <p>
        Component type meta-info is stored in an XML file collocated with the class.
        The naming convention is the full-qualified classname appended with the suffix
        <tt>.type</tt>.  The file format is the XML encoding specificed by JSR-57.
        </p>

      </subsection>
      
    </section>

  </body>

</document>

