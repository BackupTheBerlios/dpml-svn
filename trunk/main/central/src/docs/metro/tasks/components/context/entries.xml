<?xml version="1.0" encoding="UTF-8"?>

<document>

  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Metro Entry Datatype</title>
  </properties> 

  <body>

    <section name="Entry">

      <subsection name="Description">

        <p>
        Declaration of the binding of a context key with 
        a value established by reference or in-line construction.
        </p>

      </subsection>
      
      <subsection name="Entry Attributes (Reference)">

        <table>
          <tr>
            <td><tt>key</tt></td>
            <td>The entry key (required).  If a context interface declares 
               a method such as <tt>getTotalWidth()</tt> the key value will be 
               <tt>totalWidth</tt>. (refer java.beans.Introspector#decapitalize
               for additional details concerning method to key transformation).</td>
          </tr>
          <tr>
            <td><tt>uri</tt></td>
            <td>The the value of the entry to a service uri.  For exmple, the 
                the uri <tt>service:org.acme.Widget</tt> is an instruction to 
                the container to resolve a service instance type assignable to 
                the <tt>Widget</tt> interface.  May not be used in conjunction 
                with the class, method, or value attributes or nested values.
                Supported uri schemes include: <tt>service:[interface]</tt>
                and <tt>registry:[path]</tt>.
            </td>
          </tr>
          <tr>
            <td><tt>class</tt></td>
            <td>
              Optional declaration of a classname to be instantiated using
              any enclosed values. Classnames may include any class within 
              the scope of the component classloader or any primitive datatype.
              May not be used in in conjunction with the <tt>uri</tt> attribute.
            </td>
          </tr>
          <tr>
            <td><tt>method</tt></td>
            <td>
              Optional declaration of the method to invoke on the target 
              object established by the class attribute. The default 
              method value is the keyword <tt>new</tt> used within bean
              expression construction.  If the method name references a 
              static field the filed value will be used to establish the 
              target object. May not be used in in conjunction with the 
              <tt>uri</tt> attribute.</td>
          </tr>
          <tr>
            <td><tt>value</tt></td>
            <td>
              Optional declaration of string value used as a constructor
              or operation argument. May not be used in in conjunction with the 
              <tt>uri</tt> attribute or <tt>value</tt> attribute.</td>
          </tr>
        </table>

      </subsection>

      <subsection name="Nested Elements">

        <table>
          <tr>
            <td><tt><a href="values.html">value</a></tt></td>
            <td>The entry element may contain 0..n nested &lt;value&gt; directives.
              A value directive allows in-line construction of operation
              or constructor arguments.  Nested values may not be used in 
              conjunction with the entry <tt>uri</tt> or <tt>value</tt>
              attributes.</td>
          </tr>
        </table>

      </subsection>

    </section>

    <section name="Example">

      <subsection name="Static Field Example">

        <p>
          Example of the creation of a context entry referencing 
          a static method.  In the following example a value is constructed
          using a static field <tt>RED</tt> on the class <tt>java.awt.Color</tt>.
          The class <tt>java.awt.Color</tt> is selected by default because
          no <tt>class</tt> attribute is declared therefore the class defaults to 
          the class declared as a return type in the component context <tt>getColor</tt>
          method.
        </p>

<pre><![CDATA[
<entry key="color" method="RED"/>
]]></pre>

      </subsection>

      <subsection name="Constructed Example">

        <p>
          The following example constructs a <tt>java.awt.Color</tt> instance 
          by creating a series of primitive constructor arguments, instantiating 
          a new color instance and assigning this under the context entry key.
        </p>

<pre><![CDATA[
<entry key="color">
  <value class="float" value="100"/>
  <value class="float" value="200"/>
  <value class="float" value="0"/>
</entry>
]]></pre>

        <p>
          The following example constructs an instance of <tt>java.io.File</tt> 
          using a symbolic argument as a constructor parameter value (the 
          example assumes that the return type declared by the context entry
          is of the type <tt>java.io.File</tt>).  Any system or Transit 
          property may be used as a symbolic argument.
        </p>

<pre><![CDATA[
<entry key="dir" value="${user.dir}/working">
]]></pre>

      </subsection>

    </section>

  </body>

</document>

