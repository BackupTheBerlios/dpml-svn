<?xml version="1.0" encoding="UTF-8"?>

<document>

  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Metro Component Task</title>
  </properties> 

  <body>

    <section name="Component Directive">

      <pre>link:xsd:dpml/lang/dpml-component#1.0</pre>

      <subsection name="Description">

      </subsection>

      <subsection name="Standard Attributes">
        <table>
          <tr>
            <td><tt>type</tt></td>
            <td>Set the component type classname (required).</td>
          </tr>
          <tr>
            <td><tt>name</tt></td>
            <td>Optional overriding of the component name.  If not supplied
             the component profile name will default to the name of the underlying 
             component type.</td>
          </tr>
          <tr>
            <td><tt>activation</tt></td>
            <td>Set the auto-activation policy (optional).  The default value is SYSTEM.  
            Possible values include STARTUP (triggers activation on startup), DEMAND 
            (activation trigger on demand) and SYSTEM (activation decesions are delagated 
            to the container).</td>
          </tr>
          <tr>
            <td><tt>lifestyle</tt></td>
            <td>The component lifestyle. Allowable values include  
              <tt>singleton</tt>, <tt>thread</tt>, and <tt>transient</tt>.
              A component declaring the <tt>singleton</tt> lifestyle may be 
              shared across all consumers within the JVM (i.e. the potential 
              for concurrent access will exist).  A component declaring 
              the <tt>thread</tt> lifestyle policy may have a set of instances
              corresponding to the number of threads requesting access. A 
              component declaring the <tt>transient</tt> lifestyle will 
              instantiated for each access request.  The default lifestyle 
              policy is <tt>thread</tt> unless the component is associated
              with an underlying type defintion in which case the type lifestyle
              value will apply.</td>
          </tr>
          <tr>
            <td><tt>collection</tt></td>
            <td>The component garbage collection policy.  Allowable
             values include <tt>weak</tt>, <tt>soft</tt> and <tt>hard</tt>.
             A component type declaring a <tt>weak</tt> collection policy will 
             be garbage collected at the discretion of the JVM.  A component
             declaring a <tt>soft</tt> collection policy will be garbage 
             collected in the event of memory contention.  A component 
             declaring the <tt>hard</tt> collection policy will remain in 
             memory for the lifetime of the JVM unless explicitly removed
             via a management system or controlling application.</td>
          </tr>
          <tr>
            <td><tt>collection</tt></td>
            <td>Overrides the component garbage collection policy (optional).  Allowable
             values include <tt>WEAK</tt>, <tt>SOFT</tt> and <tt>HARD</tt>.
             A component declaring a <tt>WEAK</tt> collection policy will 
             be garbage collected at the discretion of the JVM.  A component
             declaring a <tt>SOFT</tt> collection policy will be garbage 
             collected in the event of memory contention.  A component 
             declaring the <tt>HARD</tt> collection policy will remain in 
             memory for the lifetime of the JVM unless explicitly removed
             via a management system or controlling application.</td>
          </tr>
        </table>

      </subsection>

      <subsection name="Special Attributes">

        <table>
          <tr>
            <td><tt>key</tt></td>
            <td>Required only when declaring a nested component within a type.  
              The key corresponds to the internal key that uniquely identifies the 
              child component within the scope of the enclosing component type.
            </td>
          </tr>
        </table>

      </subsection>

      <subsection name="Attributes Interited from Part Strategy">

        <table>
          <tr>
            <td><tt>alias</tt></td>
            <td>Used in conjunction with top-level components to declare that
            a link uri is produced referencing an absolute artifact uri to 
            the component definition.
            </td>
          </tr>
        </table>

      </subsection>


      <subsection name="Nested Elements">

        <table>
          <tr>
            <td><tt><a href="categories.html">categories</a></tt></td>
            <td>The categories element may contain 0..n logging &lt;category&gt; directives.
              A category directive allows manipulation of logging channel priorities and 
              targets.</td>
          </tr>
          <tr>
            <td><tt><a href="context/index.html">context</a></tt></td>
            <td>Declaration of the component initial context state.</td>
          </tr>
          <tr>
            <td><tt><a href="parts.html">parts</a></tt></td>
            <td>Declaration of the nested componets.</td>
          </tr>
        </table>

      </subsection>

    </section>

  </body>

</document>
