<?xml version="1.0" encoding="ISO-8859-1"?>

<document>
  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Runtime</title>
  </properties> 

  <body>
    <section name="Plugin Service">

      <p>
        The repository service provides support for the construction of 
        classloader descriptors, classloader chains, plugin class loading, 
        and plugin instantiation support.
      </p>

      <subsection name="Classloader Chain Creation">

        <p>
        A classloader chain is a sequence of classloaders that are created 
        by Transit using a meta descriptor file.  The descriptor contains 
        the declaration of api, spi and implementation classloader jar files.
        Each set of jar file entries represent the content of the respective
        classloader.  Entries are declared in the form of an artifact uri.
        The classloader chain parent is supplied as an argument to the 
        <a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/Repository.html">
        Repository</a> service interface and establishes the parent
        classloader for the API classloader.  The API classloader serves as the 
        parent to the SPI classloader which in turn serves as the parent to the IMPL
        classloader. 
        </p>

        <img src="/images/transit/chain.png"/>

        <p><i>Example classloader creation:</i></p>
        <pre>
<a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/Repository.html">Repository</a> repository = Transit.getInstance().getRepository();
ClassLoader parent = getClass().getClassLoader();
URI uri = new URI( "@MAGIC-PLUGIN-URI@" );
ClassLoader classloader = repository.getPluginClassLoader( parent, uri );
....
        </pre>

      </subsection>

      <subsection name="Plugin Descriptor Creation">

        <p>
          Some applications may require information about a plugin prior to loading the plugin. The 
          <a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/Plugin.html">Plugin</a>
          class is an immutable datatype that serves this function.  It enables convenient access to 
          the api, spi and impl URI sets, and information related to the declared main class or 
          resource and namespace declaration.
        </p>

        <p><i>Example plugin descriptor creation:</i></p>
        <pre>
<a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/Repository.html">Repository</a> repository = Transit.getInstance().getRepository();
URI uri = new URI( "@MAGIC-PLUGIN-URI@" );
<a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/Plugin.html">Plugin</a> plugin = repository.getPluginDescriptor( uri );
....
        </pre>

      </subsection>

      <subsection name="Plugin Class Loading">

        <p>
        The loading of a plugin class is a convenience operation that 
        that takes the same arguments as the classloader 
        chain creation operation.  Following establishment of the classloader
        <a href="chain.html">chain</a> the implementation classloader is used 
        to resolve the main class declared within the 
        <a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/Plugin.html">Plugin</a> descriptor.
        </p>

        <p><i>Example plugin class loading:</i></p>
        <pre>
<a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/Repository.html">Repository</a> repository = Transit.getInstance().getRepository();
ClassLoader parent = getClass().getClassLoader();
URI uri = new URI( "@MAGIC-PLUGIN-URI@" );
Class pluginClass = repository.getPluginClass( parent, uri );
....
        </pre>

      </subsection>

      <subsection name="Plugin Instantiation">

        <p>
        The <a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/Repository.html">
        Repository</a> service provides a generic plugin instantiation service. The service is typically
        used by applications that know more about the type of plugins that are loaded than Transit does.
        As such, the plugin instantiation service should be viewed as a convenience function.
        </p>

        <p>
        The plugin instantiation function takes the usual parent classloader and uri arguments and 
        adds an object array argument.  The object array is an optional set of arguments values that
        will be used by the repository service when attempting to resolve plugin constructor parameter
        arguments.
        </p>

        <p><i>Example plugin instantiation:</i></p>
        <pre>
<a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/Repository.html">Repository</a> repository = Transit.getInstance().getRepository();
ClassLoader parent = getClass().getClassLoader();
URI uri = new URI( "@MAGIC-PLUGIN-URI@" );
String[] args = new String[]{ "-debug", "-audit" ); // simulate cli args
Object[] params = new Object[]{ args };
Object plugin = repository.getPlugin( parent, uri, params );
....
        </pre>

         <p>
         The default implementation takes the fist public constructor declared by the plugin.
         For predictive behavior it is recommended to use a single public constructor as constructor
         ordering is not assured by the JVM. The parameters declared by the constructor will be
         evaluated against the supplied object array values and if type compatible, the supplied value
         will be assigned as the parameter argument.  If the constructor has any unresolved parameters, 
         the implementation will attempt to fulfill these using repository supplied values.
         </p>

         <p>
         The following argument types will be supplied by the repository implementation if the value
         is declared as a constructor parameter and the parameter is unresolved following assessment 
         of the supplied arguments.
         </p>

         <table>
           <tr><th>Type</th><th>Description</th></tr>
           <tr><td><a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/Plugin.html">Plugin</a></td><td>The plugin descriptor.</td></tr>
           <tr><td>ClassLoader</td><td>The implementation classloader.</td></tr>
           <tr><td><a href="@TRANSIT-DOCS-PATH@/net/dpml/transit/Repository.html">Repository</a></td><td>The repository used to establish the plugin.</td></tr>
           <tr><td>[]</td><td>An array of any kind that is unresolved will be assigned an empty array value.</td></tr>
         </table>

         <p>
         On completion of construction parameter population and instance of the class is creating 
         using the selected constructor.  No lifecycle processing is applied to the resulting instance.
         </p>

      </subsection>

    </section>

  </body>

</document>
