<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 Copyright 2004 Stephen McConnell

 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at

   http://www.dpml.net/central/about/legal/

 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.

 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>
  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Guide</title>
  </properties>

  <body>
    <section name="Taking Control over Plugin Deployment">

      <p>
        In this tutorial we create a tiny plugin that takes control over the
        creation and deployment of our simple cli-enhanced plugin.
      </p>

      <subsection name="Controller Source">
        <p>
          The following source code demonstrates has an application
          can easily take control over plugin deployment.
        </p>
<source><![CDATA[
package tutorial.plugin.controller;

import java.net.URI;
import java.net.URL;

import net.dpml.transit.repository.Repository;
import net.dpml.transit.repository.StandardLoader;

/**
 * A simple plugin enhanced to include cli handling.
 *
 * @author <a href="mailto:mcconnell@dpml.net">DPML Development</a>
 */
public class ControllerPlugin
{
    // ------------------------------------------------------------------------
    // constructors
    // ------------------------------------------------------------------------

   /**
    * A plugin deployed by the transit tool that controls the
    * establishment of another plugin.
    *
    * @param args the commandline arguments
    */
    public ControllerPlugin( String[] args ) throws Exception
    {
        String spec = "artifact:plugin:dpml/tutorial/dpml-transit-tutorial-plugin-cli";
        URI uri = new URI( spec );
        Repository repository = new StandardLoader();
        ClassLoader classloader = getClass().getClassLoader();
        Object[] params = new Object[]{ args };
        Object plugin = repository.getPlugin( classloader, uri, params );

        // ...

    }

}
]]></source>

        <p>
          Execution of the above example is shown below.
        </p>

<pre>$ transit -load artifact:plugin:dpml/tutorial/dpml-transit-tutorial-plugin-controller -message "Good Morning!"</pre>

        <p>
          Output of the above is:
        </p>

<pre>Good Morning!</pre>

      </subsection>

      <subsection name="Summary">

        <p>
          The Transit Repository class provides support for the creation of
          classloaders and for class instantiation.  Different controllers can
          apply specialized lifecycle processing. For example the Transit ant
          plugin task handles deployment of build listeners and antlib whereas
          more complex systems such as Metro use Transit to handle the establish
          of the underlying logging sub-system, system context, composition model
          and multiple runtime sub-systems.
        </p>

      </subsection>

    </section>

  </body>
</document>


