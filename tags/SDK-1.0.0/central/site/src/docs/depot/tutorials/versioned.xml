<?xml version="1.0" encoding="ISO-8859-1"?>

<document>
  <properties>
    <author email="mcconnell@osm.net">Stephen McConnell</author>
    <title>Version Builds</title>
  </properties>

  <body>

    <section name="Versioned Builds">

      <subsection name="Tutorial Objective">

        <p>
        The objective of this tutorial is to demonstrate the usage of 
        the <tt>-version</tt> option when building multiple projects.
        </p>

      </subsection>

      <subsection name="Executing a versioned build">

        <p>
        By default the build system assigns the version identifier of 
        <tt>SNAPSHOT</tt>.  
        </p>
        <p>
        We can override this using the <tt>-version</tt> 
        commandline option. In the following example we are requesting a listing of
        the in-scope projects together with the version cli option.  The resulting
        list is the list of projects that would be build if we dropped to list option.
        </p>

<pre>$ build -list -version <font color="darkred">ABC</font>

Selection: [3]

  [1]   project:org/acme/plugin/clock-api#<font color="blue">ABC</font>
  [2]   project:org/acme/plugin/clock-impl<font color="blue">#ABC</font>
  [3]   module:org/acme/plugin#<font color="blue">ABC</font>

$</pre>

      </subsection>
      
      <subsection name="Adding a Decimal Prefix">
      
        <p>
        A generalized version applies to a complete module is sometimes not sufficient
        to properly describe the desired results of a multi-p[roject build in terms of 
        version naming requirements.  For example, by applying the generic <tt>-version</tt>
        cli option we are stating that all resources defined withing the module (without an 
        explicit version declaration) shall be produced with version XYZ.  A more realistic 
        scenario is that your top-level index versioning strategy could reflect a public 
        XML specification whereas internal project version could reflect API based version 
        evolution.  In these scenarios it is useful to include a specification prefix - for
        example the version identifier "1.0.0-RC3" could be expressed as a decimal prefix
        of "1.0.0" and a version suffix of "RC3".  Depot enables this strategy through the 
        following properties:
        </p>
        
        <table>
          <tr>
            <td>project.version-prefix.enabled</td>
            <td>If true then the version value generated for a given project 
                will be derived from the values of the major, minor and micro 
                project version attributes described below.</td>
          </tr>
          <tr>
            <td>project.major.version</td>
            <td>The major version prefix value (must be an integer).</td>
          </tr>
          <tr>
            <td>project.minor.version</td>
            <td>The minor version prefix value (must be an integer).</td>
          </tr>
          <tr>
            <td>project.micro.version</td>
            <td>The minor version prefix value (must be an integer). Typically
            used to represent a sequential publication value.</td>
          </tr>
        </table>
        
        <p>
        In version prefixing is enabled (typicically via a high-level module property
        defintion) and major, minor and micro versions are assigned within respective modules
        and projects (reflecting respective development lifecycles), then the resulting version
        assigned to a project artifacts will correspond to the the following convention:
        </p>
        
        <pre>[major].[minor].[micro]-[cli-supplied-version-argument]</pre>
        
        <p>
        The DPML project artifacts use the following convention:
        </p>
        
        <table>
          <tr>
            <td>major</td>
            <td>All resources sharing the same major version are deemed as backward 
                compatible.</td>
          </tr>
          <tr>
            <td>minor</td>
            <td>A minor version represents a functional extension or enhancement
                that is compatible within the context of the major version identifier.</td>
          </tr>
          <tr>
            <td>micro</td>
            <td>A micro version represents a sequential release identifier relative 
                to the <tt>[major].[minor]</tt> namespace.</td>
          </tr>
        </table>
        
      </subsection>
      
      <subsection name="Summary">

        <p>
        The above sequence demonstrates the impact of the <tt>-version</tt> option 
        in terms of resource naming and the corresponding meta-data (such as module
        information) that is generated by the build process.  All of the resources
        (jars, module files, etc.) are now suitable for publication into a public
        (or shared) repository.
        </p>
        
      </subsection>
      
    </section>

  </body>
  
</document>

