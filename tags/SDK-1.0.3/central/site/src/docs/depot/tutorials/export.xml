<?xml version="1.0" encoding="ISO-8859-1"?>

<document>
  <properties>
    <author email="mcconnell@osm.net">Stephen McConnell</author>
    <title>Exporting Modules</title>
  </properties>

  <body>

    <section name="Exporting Modules">

      <subsection name="Tutorial Objective">

        <p>
        In this tutorial we are demonstration how you can create a module
        artifact suitable for use by other third-parties.
        </p>

      </subsection>

      <subsection name="index.xml">

        <p>
        Our index definition remains unchanged except for the addition of 
        a type production statement declaring that the module build produces
        a module artifact (and just for fun we have requested a version alias
        to be produced at the same time).
        </p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;index xmlns="link:xsd:dpml/lang/dpml-module#1.0"&gt;

  &lt;imports&gt;
    &lt;import uri="link:module:ant"/&gt;
    &lt;import uri="link:module:dpml"/&gt;
  &lt;/imports&gt;

  &lt;module name="org/acme" basedir="."&gt;
  
    <font color="darkred">&lt;types&gt;
      &lt;type id="module" version="1.0"&gt;
    &lt;/types&gt;</font>
  
    &lt;project name="clock-api" basedir="api"&gt;
      &lt;types&gt;
        &lt;type id="jar"/&gt;
      &lt;/types&gt;
    &lt;/project&gt;
  
    &lt;project name="clock-impl" basedir="impl"&gt;
      &lt;types&gt;
        &lt;type id="jar"/&gt;
      &lt;/types&gt;
      &lt;dependencies&gt;
        &lt;runtime&gt;
          &lt;include key="clock-api"/&gt;
        &lt;/runtime&gt;
        &lt;test&gt;
          &lt;include ref="ant/ant-junit"/&gt;
          &lt;include ref="dpml/transit/dpml-transit-main"/&gt;
        &lt;/test&gt;
      &lt;/dependencies&gt;
    &lt;/project&gt;

  &lt;/module&gt;
  
&lt;/index&gt;
</pre>

      </subsection>

      <subsection name="The Generated Module Artifact">

        <p>
        In this example we are building the module project using the 
        Depot template. As such Depot's project aware tasks are detecting 
        the type production statement associated with the module, resulting in 
        the automatic production of the external module artifact under the 
        <tt>target/deliverables/modules/acme-SNAPSHOT.module</tt> file.
        </p>

<source><font color="blue"><![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>
<module name="org/acme" version="SNAPSHOT"
    xmlns="link:xsd:dpml/lang/dpml-module#1.0">

  <types>
    <type id="module" version="1.0"/>
  </types>

  <resource name="clock-api" version="SNAPSHOT">
    <types>
      <type id="jar"/>
    </types>
  </resource>

  <resource name="clock-impl" version="SNAPSHOT">
    <types>
      <type id="jar"/>
    </types>
    <dependencies>
      <runtime>
        <include ref="org/acme/clock-api"/>
      </runtime>
    </dependencies>
  </resource>

</module>]]></font></source>

      </subsection>
      
      <subsection name="Technical Note">
        
        <p>
        The above module definition is not really ready for publication - after all
        it contains several references to <tt>SNAPSHOT</tt> versions (and we don't 
        want to publish anything referrencing a generalized <tt>SNAPSHOT</tt> version).
        We can resolve this this using the <tt>-version</tt> option under the <tt>build</tt>
        command.  For example, the following command will build the projects and module
        defintion using the version identifier <tt>324</tt>.
        </p>

<pre>$ build -version 324</pre>
      
        <p>
        The following module artifact demonstrates the impact of the <tt>-version</tt> option 
        in terms of resource naming and the corresponding meta-data that is generated by the 
        build process.  All of the resources (jars, module files, etc.) are now suitable for 
        publication into a public (or shared) repository.
        </p>
        
<source>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;module name="org/acme" version="1.0.0"
    xmlns="link:xsd:dpml/lang/dpml-module#1.0"&gt;

  &lt;types&gt;
    &lt;type id="module" version="1.0"/&gt;
  &lt;/types&gt;

  &lt;resource name="clock-api" version="<font color="blue">324</font>"&gt;
    &lt;types&gt;
      &lt;type id="jar"/&gt;
    &lt;/types&gt;
  &lt;/resource&gt;

  &lt;resource name="clock-impl" version="<font color="blue">324</font>"&gt;
    &lt;types&gt;
      &lt;type id="jar"/&gt;
    &lt;/types&gt;
    &lt;dependencies&gt;
      &lt;runtime&gt;
        &lt;include ref="org/acme/clock-api"/&gt;
      &lt;/runtime&gt;
    &lt;/dependencies&gt;
  &lt;/resource&gt;

&lt;/module&gt;</source>
      
      </subsection>
      
      <subsection name="Summary">

        <p>
        This tutorial has demonstrated the creation of a module artifact. During module
        generation our project defintions have been converted to simple resource defintions
        (involving the elimination of non-runtime concerns such as basedir, build and test 
        dependencies, etc.).  The remaining information is suitable for full transitive dependency
        evaluation by third parties (and associated model/name mapping to artifact uris). In the
        same way that we included the Ant module via an include staement - third-parties can 
        now include the above information using something like:
        </p>
        
<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;index xmlns="link:xsd:dpml/lang/dpml-module#1.0"&gt;

  &lt;imports&gt;
    <font color="blue">&lt;import uri="link:module:org/acme#1.0"/&gt;</font>
  &lt;/imports&gt;

  <font color="gray">...</font>
    
&lt;/index&gt;
</pre>

      </subsection>
      
      <subsection name="Next Tutorial">
      
        <p>
        Our next tutorial is also related to the capture and propergation of 
        build-time meta-data.  In the above example we have demonstrated how meta-data
        derived from module and project defintions can be transformed into artifacts
        that can be used by other projects.  In our <a href="plugins.html">next tutorial</a>
        we are going to focus on the capture and use of transitive dependency information 
        related to runtime concerns.
        </p>
        
      </subsection>
      
    </section>

  </body>
</document>

