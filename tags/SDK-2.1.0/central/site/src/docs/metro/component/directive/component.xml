<?xml version="1.0" encoding="UTF-8"?>

<document>

  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Metro: Component Directive</title>
  </properties> 

  <body>

    <section name="Component Directive">

      <subsection name="Description">
      
        <p>
        Definition of a part deployment strategy using the Metro component model.
        </p>

      </subsection>
      
      <subsection name="Standard Attributes">
        <table>
          <tr>
            <td><tt>class</tt></td>
            <td>Declares the component classname (required).</td>
          </tr>
          <tr>
            <td><tt>name</tt></td>
            <td>Sets the component name.</td>
          </tr>
          <tr>
            <td><tt>activation</tt></td>
            <td>Set the activation policy (optional).  The default value is SYSTEM.  
            Possible values include STARTUP (triggers activation on startup), DEMAND 
            (activation trigger on demand) and SYSTEM (activation decesions are delagated 
            to the container).</td>
          </tr>
          <tr>
            <td><tt>lifestyle</tt></td>
            <td>Set the lifestyle policy (optional). Allowable values include  
              <tt>singleton</tt>, <tt>thread</tt>, and <tt>transient</tt>.
              A component declaring the <tt>singleton</tt> lifestyle may be 
              shared across all consumers within the JVM (i.e. the potential 
              for concurrent access will exist).  A component declaring 
              the <tt>thread</tt> lifestyle policy may have a set of instances
              corresponding to the number of threads requesting access. A 
              component declaring the <tt>transient</tt> lifestyle will 
              instantiated for each access request.</td>
          </tr>
          <tr>
            <td><tt>collection</tt></td>
            <td>Sets the garbage collection policy (optional).  Allowable
             values include <tt>weak</tt>, <tt>soft</tt> and <tt>hard</tt>.
             A component type declaring a <tt>weak</tt> collection policy will 
             be garbage collected at the discretion of the JVM.  A component
             declaring a <tt>soft</tt> collection policy will be garbage 
             collected in the event of memory contention.  A component 
             declaring the <tt>hard</tt> collection policy will remain in 
             memory for the lifetime of the JVM unless explicitly removed
             via a management system or controlling application.</td>
          </tr>
        </table>
        
      </subsection>
        
      <subsection name="Special Attributes">
        
        <table>
          <tr>
            <td><tt>key</tt></td>
            <td>Required only when declaring a nested component as a child within
              a <a href="parts.html"><tt>&lt;parts&gt;</tt></a> directive. The key 
              uniquely identifies the child component within the scope of the enclosing 
              entity.
            </td>
          </tr>
        </table>
        
      </subsection>
        
      <subsection name="Nested Elements">

        <table>
          <!--
          <tr>
            <td><tt><a href="categories.html">categories</a></tt></td>
            <td>The categories element may contain 0..n logging &lt;category&gt; directives.
              A category directive allows assignment of initial channel priorities and 
              targets.</td>
          </tr>
          -->
          <tr>
            <td><tt><a href="context/index.html">context</a></tt></td>
            <td>Declaration of the component initial context state.</td>
          </tr>
          <tr>
            <td><tt><a href="parts.html">parts</a></tt></td>
            <td>Declaration of the nested components.</td>
          </tr>
        </table>

      </subsection>

    </section>

  </body>

</document>
