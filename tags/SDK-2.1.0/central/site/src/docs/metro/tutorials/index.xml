<?xml version="1.0" encoding="ISO-8859-1"?>

<document>

  <properties>
    <author email="mcconnell@osm.net">Stephen McConnell</author>
    <title>Metro Component Development Tutorials</title>
  </properties>

  <body>
  
    <section name="Metro Tutorial">
    
      <p>
      The Metro platform provides the prefered deployment strategy and 
      runtime handler that delivers a complete context driven IOC object 
      instantiation model. 
      In addition to instantiation there are several aspects of a class that 
      effect its deployment.  These aspects include thread-safety, a depoyment and 
      decommissioning lifecycle, garbage collection policy, etc.  Each of these concerns 
      are expresssed as well defined semantic features within the Metro component model.
      </p>
      
      <subsection name="Totorial Objective">
      
        <p>
        The objective of this tutorial is the demonstration of how we can 
        introduce a new instantiation strategy into a part deployment descriptor.
        Subsequent tutorials will use the resource established here as the baseline 
        for the introduction of the core Metro component model concepts.
        </p>
        
        <p>
        Supporting classes:
        </p>

        <table>
          <tr>
            <td><a href="hello/Demo.java.html">Demo.java</a></td>
            <td>A minimal component implementation.</td>
          </tr>
          <tr>
            <td><a href="hello/DemoTestCase.java.html">DemoTestCase.java</a></td>
            <td>Testcase that validates component deployment.</td>
          </tr>
        </table>

      </subsection>
      
      <subsection name="Technical Note">
      
        <p>
        This tutorial and the following tuitorials use the 
        <a href="../../util/depot/index.html">Depot</a> build system which is basically
        Ant driven by the depot command line handler.  Depot reads information about a 
        target project from a <tt>index.xml</tt> file and uses this information to establish
        an Ant project definition and supporting properties and classpath criteria.  In most
        cases the project definition is sufficient to automate the build process. These tutorials
        assumes that the reader is familiar with the concepts of a project defintion, centralized 
        defintions under a common index, and the management deployment strategy datatypes (refer
        <a href="../../util/depot/tutorials/index.html">Depot Tutorials</a> for additional 
        information).
        </p>
        
      </subsection>
      
      <subsection name="Component Creation">
      
        <p>
        In the following Depot project definition we are declaring 
        a new project with publication of a jar and a part artifact.  
        The significant difference from a regular plugin is the usage 
        of a custom part strategy.
        </p>
        
        <p>
        <i>From the global <tt>index.xml</tt> we establish the reference to our 
        target project:</i>
        </p>
<pre>
&lt;index ..... &gt;

  ...
  
  <font color="darkred">&lt;project xmlns="dpml:library" name="hello"&gt;

    &lt;info title="DPML Metro Hello Tutorial"&gt;
      &lt;description&gt;Introductory Hello World demo.&lt;/description&gt;
    &lt;/info&gt;
    
    &lt;types>
      &lt;type id="jar"/&gt;
      &lt;type id="part" source="target/component.xml"/&gt;
    &lt;/types&gt;
    
    &lt;dependencies&gt;
      &lt;test&gt;
        &lt;include ref="dpml/metro/dpml-metro-part"/&gt;
        &lt;include ref="org/apache/ant/ant-junit"/&gt;
      &lt;/test&gt;
    &lt;/dependencies&gt;
    
  &lt;/project&gt;</font>
  
  ...
  
&lt;/index&gt;
</pre>

        <p><i>The component.xml file referenced in the part type production 
        statement contains the information about the component deployment 
        strategy.</i></p>
        
<pre>
&lt;component xmlns="dpml:metro" name="demo" class="org.acme.Demo"/&gt;
</pre>

        <p>
        The custom part definition introduced under the <tt>dpml:metro</tt>
        namespace is declaring the production of a new <tt>part</tt> datastructure under which 
        the class <tt>org.acme.Demo</tt> is to handled by the Metro runtime platform. The above 
        project definition also includes the declaration of test phase dependencies that we will need in 
        order to launch the component.
        </p>
        
        <p>
        The generated part datastructure is show below (the custom Metro deployment 
        strategy is hilighted in red).  The datastructure include dependency information
        extracted from the prject defintion, together with component deployment infromation
        resolved from the referenced component.xml deployment directive.
        </p>
        
<source>
&lt;part xmlns="dpml:part"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

  &lt;info/&gt;

  <font color="darkred">&lt;component xmlns="dpml:metro"
      class="org.acme.Demo"
      name="demo"/&gt;</font>

  &lt;classpath&gt;
    &lt;private&gt;
      &lt;uri&gt;artifact:jar:artifact:jar:org/acme/hello#SNAPSHOT&lt;/uri&gt;
    &lt;/private&gt;
  &lt;/classpath&gt;

&lt;/part&gt;
</source>

      </subsection>
      
      <subsection name="Summary">
      
        <p>
        In this example the Demo implementation class contains nothing significant - 
        however, the important point of this tutorial is the association of
        a different runtime handler for the class within our part definition.  In 
        particular:
        </p>
        
        <ul>
          <li>the &lt;component&gt; element is defined under a schema definition 
            which assert a default value of "link:part:dpml/lang/dpml-lang-component"
            for the handler attibute which in turn is used to establish the runtime
            handler for the class</li>
          <li>the runtime handler is supplied with a classloader composed of jar
          files resolved from the &lt;classpath&gt; definition</li>
        </ul>
        
        <p>
        Our next tutorial extends this project with the introduction of 
        <a href="context.html">context management</a> and in particular, the way in 
        which a component class declares deployment context assumptions, and the mechanisms 
        used by the Metro runtime to fullfill those requirements.
        </p>
        
      </subsection>

    </section>

  </body>

</document>



