<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
 Copyright 2005 David Leangen
 Copyright 2004 Stephen McConnell
 Copyright 2004 Niclas Hedhman

 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at

   http://www.dpml.net/central/about/legal/

 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.

 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>
  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <author email="niclas@hedhman.org">Niclas Hedhman</author>
    <author email="david.leangen@konova.com">David Leangen</author>
    <title>DPML Transit</title>
  </properties>

  <body verified="true">

    <section name="Product Overview">

      <p>
        One of the more difficult tasks when building Java applications
        is managing classloaders. Often, when combining
        various projects together into an enterprise application, the
        application is not able to load the right classes at the right time,
        causing the application to fail in mysterious and sometimes subtle
        ways. Although a fundamental issue, classloading has remained
        a rather obscure topic. Not surprisingly, many Java projects fail
        to manage classloaders effectively.

        Transit provides a solution to this problem.
      </p>

      <p>
        At the core of Transit is a URL protocol handler, a classloader meta
        information descriptor and plugin loader.
        Based on these, Transit is able to manage classloaders, not only
        effectively and nearly invisible to the casual user, but in a location
        independent way. That means, applications don't need to be concerned over
        where the jars and other resources are located, whether on the local file
        system, on LAN servers or somewhere on the Internet.
        This allows an application to provide extendability, hot-redeployment
        and more advanced services.
      </p>

      <p>
        In other words, Transit helps to realize the full potential of a
        Java application.
      </p>

<!--
      <subsection name="Features and Benefits">
      <a name="features"/>

        <p>
          Key features of the Transit system include:
        </p>

        <ol>
          <li>high level of integration with the JVM</li>
          <li>simple configuration model</li>
          <li>small footprint</li>
          <li>flexible event monitoring</li>
        </ol>

        <p>
          Key benefits delivered by Transit include:
        </p>

        <ol>
          <li>cost reduction on product deployment and upgrade</li>
          <li>reduced risk though improved control over version management</li>
          <li>improved quality through reduction in class conflicts</li>
          <li>improved security through repository management</li>
          <li>low maintenance though centralized configuration</li>
        </ol>
      </subsection>
-->

    </section>

  </body>
</document>
