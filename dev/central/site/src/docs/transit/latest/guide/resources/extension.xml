<?xml version="1.0" encoding="ISO-8859-1"?>

<document>
  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Guide</title>
  </properties> 

  <body>

    <section name="Setting Transit as a system-wide protocol handler">

      <p>
        After Transit has been properly installed on a host, a 
        Transit-agnostic application that retrieves resources by the 
        <code>java.net.URL</code> can be Transit enabled just by including 
        the Transit jar file in the system or extension classloader and setting
        a system property. Then Jar files can be referenced with the artifact:
        protocol, just like png, jpg or xml files. Even the URLClassLoader 
        will automatically utilize the artifact: protocol.
      </p>

      <p>
        The following testcase demonstrates the declaration of Transit
        as a jvm-wide protocol handler.  The advantages of this approach 
        is that client code does not need to reference transit classes.
      </p>
 
      <p>
        <i>Example:</i>
      </p>
<source>URL url = new URL( "artifact:spec:tutorial/example-property-file" );
</source>

      <subsection name="Testcase Example">

        <p>
          The setup of the Transit handler as part of the JVM is described in
          the following example.
        </p>

<source>package tutorial.extension;

import java.io.InputStream;
import java.util.Properties;
import java.net.URL;

import junit.framework.TestCase;

/**
 * Example of loading a property file using the artifact protocol with 
 * the protocol handler setup as part of the jvm.
 *
 * @author <a href="mailto:dev-dpml@lists.ibiblio.org">The Digital Product Meta Library</a>
 */
public class ExampleTestCase extends TestCase
{
    protected void setUp() throws Exception
    {
        System.setProperty( "java.protocol.handler.pkgs", "net.dpml.transit" );
        System.setProperty( "dpml.transit.authority.file", "target/test/dpml.transit.authority" );
    }

    public void testPropertyLoading() throws Exception
    {
        Properties properties = new Properties();
        URL url = new URL( "artifact:spec:tutorial/example-property-file" );
        InputStream input = url.openStream();
        properties.load( input );
        String message = properties.getProperty( "tutorial.message" );
        System.out.println( message );
    }
}
</source>

        <p>
          Output from the above testcase is shown below:
        </p>
<pre>
test:
  [x:junit] Executing forked test.
  [x:junit] Running tutorial.extension.ExampleTestCase
  [x:junit] Hello!
  [x:junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.125 sec
</pre>

      </subsection>

      <subsection name="Installing Transit as a system wide protocol handler.">

        <p>
          <i>Please note that this information is only relevant when using Transit 
          outside of Metro or Magic.</i>
        </p>

        <p>
          To install transit as a system wide protocol handler you need to do two things;
        </p>
        <ol>
          <li>
            Put the dpml-transit-main.jar in the system or extension classpath.
          </li>
          <li>
            Set the system property <strong>"java.protocol.handler.pkgs"</strong>
            to <strong>"net.dpml.transit"</strong> in the application's launcher,
            i.e. 
<source> java -Djava.protocol.handler.pkgs=net.dpml.transit ... </source>
          </li>
        </ol>
        <p>
          You should probably also take a look at settings of the authorative 
          host and its associated resource hosts, by default installed at 
          ${dpml.home}/transit/authority
        </p>
        <p>
          If you have a large number of hosts that needs the same resource host
          configuration, you move the ${dpml.home}/transit/authority 
          content to a LAN based server, and change the property found in the
          ${dpml.home}/transit/dpml.transit.authority file to point
          to that location. You will also need to create a file named 
          <strong><i>index.lst</i></strong> on that server, which lists all the
          resource host files at that location.
        </p>
      </subsection>

      <subsection name="Troubleshooting" >
        <p>
          Unfortunately there are a few things that can go wrong, and as we gain
          more experience we will add them as they appear here.
        </p>
        <table>
          <tr>
            <th>Problem</th>
            <th>Solution</th>
          </tr>
          <tr>
            <td>I get "Artifact AUTHORITY can not be established."</td>
            <td>
              The Authorative Host could not be established, for one of many 
              reasons. First of all check that the environment variable 
              DPML_HOME (if present) points to a valid Transit installation.
              Then make sure that if the system property "dpml.home" is present,
              that it points to a proper Transit installation. Then make sure 
              that you have a file named 
              ${dpml.home}/transit/dpml.transit.authority, and that it contains
              a property named "dpml.transit.authority" which either points to
              a URL or a file (no protocol defined), and if it is file based
              that the location is relative to ${dpml.home}/transit. Finally,
              the location specified must be a directory, and that directory
              must contain one or more resource host definitions, plus it must
              contain a transit configruation and a cache configuration file.
            </td>
          </tr>
          <tr>
            <td>I get "Unknown protocol: artifact" when I instantiate a URL.</td>
            <td>
              This means that the java.net package doesn't manage to locate the
              Transit protocol handler. One of two possible reasons. Either you
              have not managed to properly set up the system property 
              "java.protocol.handler.pkgs" to "net.dpml.transit", OR the
              dpml-transit-main.jar file is not in the <strong>system classpath
              </strong> or higher up in the classloader chain. Due to a bug in
              the protocol handler code in the JVM, the classloader of the
              calling class is not used as intended, and the JVM will fallback
              to use ClassLoader.getSystemClassLoader() to locate the protocol
              handler. If this is not possible in your application, you can
              also enforce the proper handler for the URL using the 
              <code>new URL( null, spec, new Handler() )</code> format described
              above.
            </td>
          </tr>
        </table>
      </subsection>



    </section>

  </body>
</document>

