<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 Copyright 2004 Stephen McConnell

 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at

   http://www.dpml.net/central/about/legal/

 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.

 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>
  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Guide</title>
  </properties>

  <body>
    <section name="Enhancing the Simple Plugin">

      <p>
        This tutorial introduces some implementation changes to the Simple Plugin
        example.  In particular we have included some functionality from the
        commons-cli to handle the incoming arguments.  This change impacts our
        implementation dependencies which are automatically reflected in the
        plugin descriptor.  During execution our controlling application is
        using Transit to take care of the classloader management and everything
        proceeds witout any modification to the controlling system.
      </p>

      <subsection name="Enhanced Plugin Source">
        <p>
          The example plugin java source including CLI handling:
        </p>
<source><![CDATA[
package tutorial.plugin;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionBuilder;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;


/**
 * A simple plugin enhanced to include cli handling.
 *
 * @author <a href="mailto:dev@dpmlnet">Stephen J. McConnell</a>
 */
public class SimplePlugin
{
    // ------------------------------------------------------------------------
    // static
    // ------------------------------------------------------------------------

    private static Options buildOptions()
    {
        Options options = new Options();
        OptionBuilder.hasArg();
        OptionBuilder.withArgName( "message-test" );
        OptionBuilder.withDescription( "prints a message" );
        Option option = OptionBuilder.create( "message" );
        options.addOption( option );
        return options;
    }

    // ------------------------------------------------------------------------
    // constructors
    // ------------------------------------------------------------------------

   /**
    * Creation of a new SimplePlugin instance.
    *
    * @param args the commandline arguments
    */
    public SimplePlugin( String[] args ) throws ParseException
    {
        Options options = buildOptions();
        CommandLineParser parser = new GnuParser();
        CommandLine line = parser.parse( options, args );

        if( line.hasOption( "message" ) )
        {
            String message = line.getOptionValue( "message" );
            System.out.println( message );
        }
        else
        {
            System.out.println( "Nothing to say." );
        }
    }
}
]]></source>

      </subsection>

      <subsection name="Plugin meta data">

        <p>
          If we look at the plugin meta data we see that the list of
          implementation now includes the commons-cli package.
        </p>

<source>
#
# Implementation dependencies.
#
dpml.artifact.dependency.0 = artifact:jar:dpml/transit/dpml-transit-main#SNAPSHOT
dpml.artifact.dependency.1 = artifact:jar:commons-cli/commons-cli#1.0
dpml.artifact.dependency.2 = artifact:jar:dpml/tutorial/dpml-transit-tutorial-plugin-cli

</source>

      </subsection>

      <subsection name="Executing the Plugin">

        <p>
          In the following example the command line arguments that are not handled
          by the Transit CLI handler are passed on to the plugin it is loading.  In particular
          we are declaring a message using the -message option that we added to the our plugin.
        </p>

        <pre>$ transit -load artifact:plugin:dpml/tutorial/dpml-transit-tutorial-plugin-cli -message Hello</pre>

        <p>
          The result of running the plugin is show below:
        </p>

        <pre>Hello</pre>

      </subsection>

      <subsection name="Next Step">

        <p>
          In the <a href="../control/index.html">next tutorial</a> we take control
          over plugin deployment.
        </p>

      </subsection>

    </section>

  </body>
</document>


