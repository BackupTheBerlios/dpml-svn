<?xml version="1.0" encoding="ISO-8859-1"?>

<document>
  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Guide</title>
  </properties> 

  <body>
    <section name="Using the transit protocol Handler">

      <p>
        The following testcase demonstrates the use of a transit protocol
        handler when constructing a new URL.  The advantages of this approach
        is that your application is not dependent on any jvm configuration 
        prerequisited.  However, your code is dependent on a reference to the 
        Transit Handler class.
      </p>

      <p>
        <i>Example:</i>
      </p>
<source>String spec = "artifact:spec:tutorial/example-property-file";
URL url = new URL( null, spec, new net.dpml.transit.artifact.Handler() );
</source>

      <subsection name="Testcase Examples">

<source>
package tutorial.artifact;

import java.io.File;
import java.io.InputStream;
import java.util.Properties;
import java.net.URL;

import net.dpml.transit.artifact.Handler;

import junit.framework.TestCase;

/**
 * Example of loading a property file using the artifact protocol and explicit 
 * handler declaration.
 *
 * @author <a href="mailto:dev-dpml@lists.ibiblio.org">The Digital Product Meta Library</a>
 */
public class ExampleTestCase extends TestCase
{
    protected void setUp() throws Exception
    {
        File basedir = new File( System.getProperty( "project.dir" ) );
        File authority = new File( basedir, "dpml.transit.authority" );
        System.setProperty( "dpml.transit.authority.file", authority.getAbsolutePath() );
    }

    public void testPropertyLoading() throws Exception
    {
        Properties properties = new Properties();
        URL url = new URL( null, "artifact:spec:tutorial/example-property-file", new Handler() );
        InputStream input = url.openStream();
        properties.load( input );
        String message = properties.getProperty( "tutorial.message" );
        System.out.println( message );
    }
}
</source>

        <p>
          Output from the above testcase is shown below:
        </p>
<pre>
test:
  [x:junit] executing in local jvm
  [x:junit] Running tutorial.artifact.ExampleTestCase
  [x:junit] Hello!
  [x:junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.188 sec
</pre>
      </subsection>

    </section>
  </body>
</document>

