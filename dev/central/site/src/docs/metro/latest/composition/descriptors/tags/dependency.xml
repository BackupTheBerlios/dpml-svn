<?xml version="1.0"?>

<document>

  <properties>
    <author email="mcconnell@apache.org">Stephen McConnell</author>
    <title>Javadoc Tag Specification</title>
  </properties>

  <body>

    <section name="Dependency Tag">
      <subsection name="Description">
<p>Component types may declare multiple service dependencies through the service tag.  Each service tag references a versioned service identifier that the container will supply to the component type on request relative to the declared dependency key.</p>
      </subsection>
      <subsection name="Attributes">
        <table>
          <tr><th>Attribute</th><th>Required</th><th>Description</th></tr>
          <tr>
            <td>type</td><td>yes</td>
            <td>The service interface classname that the component is dependent on.
            </td>
          </tr>
          <tr>
            <td>version</td><td>no</td>
            <td>
              The service version.
              If not declared the service dependency shall match any version.
            </td>
          </tr>
          <tr>
            <td>optional</td><td>no</td>
            <td>
               A value of 'true' or 'false'.  If true, the supply of a dependency
               is at the discression of the container.  If false (the default) 
               a container is required to resolve and supply a service matching 
               the dependency declaration.
            </td>
          </tr>
        </table>
      </subsection>
      <subsection name="Example">


<source><![CDATA[
package net.osm;

/**
 * Example of a component declaring multiple service dependencies.
 *
 * @metro.component version="1.0" name="demo"
 */
public class Demo implements Serviceable
{
    ...

   /**
    * Supply of dependent services to this component by 
    *  the container.
    * @param manager the service manager
    * @metro.dependency key="home" type="Home" version="1.3" 
    * @metro.dependency type="Resource" version="5" optional="true"
    */
    public void service( ServiceManager manager ) 
      throws ServiceException
    {
        m_home = (Home) manager.lookup( "home" );
        try
        {
            m_resource = (Resource) manager.lookup( 
              Resource.getClass().getName() );
        }
        catch( ServiceException se )
        {
            // it's optional
        }
    }
}
]]></source>

<p>Generated meta-info type descriptor:</p>

<source><![CDATA[
<type>
  <info>
    <version>1.3.0</version>
    <name>demo</name>
  </info>
  <dependencies>
    <dependency key="home" type="Home" version="1.3.0"/>
    <dependency type="Resource" version="5.0.0" optional="true"/>
  </dependencies>
</type>
]]></source>
      </subsection>
    </section>
  </body>

  <footer>
    <legal>
      Copyright (c) @year@ The Avalon Apache Project All rights reserved.
      $Revision: 1.1 $ $Date: 2004/04/14 11:47:33 $
    </legal>
  </footer>

</document>


