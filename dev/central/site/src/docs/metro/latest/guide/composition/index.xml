<?xml version="1.0"?>

<!-- 
 Copyright 2004 Apache Software Foundation
 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at 
 
   http://www.dpml.net/central/about/legal/
 
 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.
 
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>
  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Guide</title>
  </properties> 

  <body>
    <section name="Component Composition">
      <subsection name="Composite Blocks">
        <p>
         A container can declare services that it exports.  In such a case
         the container declares one or more service directives that map 
         components declared within itself as service providers.  
         This mechanism enables a container to appear as a regular 
         component relative to other components.
        </p>
        <p>
         Content supporting this tutorial is available under the 
         tutorials/composition directory.
        </p>
      </subsection>
      <subsection name="Sample Container">
        <p>
         The following container definition includes:
        </p>
        <ul>
          <li>an application component</li>
          <li>a location provider block included by reference</li>
          <li>an application block included by reference</li>
        </ul>
        <p>
          The application block declares dependencies on a location 
          and publishing service.  The location and publishing block
          declare that they provide these respective services. As a part of 
          the general component assembly process - Metro will assemble 
          blocks relative to the services and dependencies they declare.
          When a block is deployed, it appears to other components as a 
          component providing the services it exports.  However in practice
          these services are provided by components defined within the 
          container (i.e. the container represents the definition of 
          a virtual component and the containers components and subcontainers
          represent the virtual component implementation).
        </p>
        <p>The top level application block declaration (block.xml):</p>
        <source><![CDATA[
<container name="application">

  <classloader>
    <classpath>
      <artifact>@SERVICE-API-SPEC@</artifact>
      <artifact>@TUTORIAL-LOCATION-IMPL-SPEC@</artifact>
      <artifact>@LOGGING-API-SPEC@</artifact>
      <artifact>@ACTIVITY-API-SPEC@</artifact>
      <artifact>@CONFIGURATION-API-SPEC@</artifact>
      <artifact>@TUTORIAL-LOCATION-API-SPEC@</artifact>
      <artifact>@TUTORIAL-LOCATION-IMPL-SPEC@</artifact>
      <artifact>@TUTORIAL-PUBLISHER-API-SPEC@</artifact>
      <artifact>@TUTORIAL-PUBLISHER-IMPL-SPEC@</artifact>
    </classpath>
  </classloader>

  <include name="location" artifact="block:dpml/tutorial/dpml-tutorial-location-impl"/>

  <include name="publisher" artifact="block:dpml/tutorial/dpml-tutorial-publisher-impl"/>

  <component name="application" class="tutorial.application.Application"/>

</container>
]]></source>
        <p>
          If we look at the location block (as an example) we will see a corresponding
          service declaration.  This declaration includes a source reference that is 
          a relative component path that tells Metro to use the sub-component named
          "location" as the component that will fulfil the service published by this 
          block.
        </p>
        <source><![CDATA[
<container name="locator">

  <services>
    <service type="tutorial.location.LocationService">
      <source>info</source>
    </service>
  </services>

  <classloader>
    <classpath>
      <artifact>@LOGGING-API-SPEC@</artifact>
      <artifact>@ACTIVITY-API-SPEC@</artifact>
      <artifact>@CONFIGURATION-API-SPEC@</artifact>
      <artifact>@TUTORIAL-LOCATION-API-SPEC@</artifact>
      <artifact>@TUTORIAL-LOCATION-IMPL-SPEC@</artifact>
    </classpath>
  </classloader>

  <component name="info" class="tutorial.location.LocationComponent" profile="locator"/>

</container>
]]></source>

      </subsection>
      <subsection name="Execution">
        <p>
         To run build and run the example please use the following commands:
        </p>
        <source><![CDATA[
$ cd composition
$ ant
$ metro metro -execute application\impl\target\deliverables\blocks\*.block
]]></source>
        <p>
         The log output demonstrates the deployment by Metro of the blocks
         in the correct order (based on dependency resolution) and the 
         execution of the test application.
        </p>
        <source><![CDATA[
[INFO   ] (application.publisher.publisher): created
[INFO   ] (application.location.info): location: Paris
[INFO   ] (application.application): servicing application
[INFO   ] (application.location.info): location: Paris
[INFO   ] (application.publisher.publisher): created
[INFO   ] (application.publisher.publisher):
******************
* Paris
******************
[INFO   ] (application.application): done
]]></source>
      </subsection>
      <subsection name="Note">
        <p>
         The primary benefit of using block level services and dependencies
         is isolation of a block implementation from the public services it 
         provides.
        </p>
      </subsection>
    </section>
  </body>

</document>

