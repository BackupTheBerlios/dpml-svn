<?xml version="1.0" encoding="UTF-8"?>
<document>

  <properties>
    <author email="mcconnell@dpml.net">Stephen McConnell</author>
    <title>DPML Magic</title>
  </properties> 

  <body>

    <section name="Index Task">

      <p>
      The home task is responsible for the initialization of 
      the magic environment.  This includes:
      </p>

      <ul>
        <li>loading of ${basedir}/user.properties</li>
        <li>loading of ${basedir}/build.properties</li>
        <li>loading of ${user.home}/magic.properties</li>
        <li>initialization of the project model</li>
      </ul>

      <p>
      The following example demonstrates the initialization of 
      a home using a default ${project.home}/index.xml.
      </p>

<source><![CDATA[
<x:index/>
]]></source>

<pre>
   [x:home] Building system definition.
</pre>

      <subsection name="Project Properties">

      <p>
      The creation of a home automatically establishes the following set 
      of immutable project properties.  These properties can be referenced
      anywhere in an ant script following the index declaration.
      </p>

      <table>
        <tr><th>Property</th><th>Description</th></tr>
        <tr>
          <td>${project.key}</td>
          <td>The unique project key.</td>
        </tr>
        <tr>
          <td>${project.name}</td>
          <td>The project name.</td>
        </tr>
        <tr>
          <td>${project.group}</td>
          <td>The name of the group that the project is a part of.</td>
        </tr>
        <tr>
          <td>${project.version}</td>
          <td>The project version.</td>
        </tr>
        <tr>
          <td>${project.type}</td>
          <td>The project artifact type.</td>
        </tr>
        <tr>
          <td>${project.uri}</td>
          <td>The full artifact uri.</td>
        </tr>
        <tr>
          <td>${project.path}</td>
          <td>A relative file path that can be used to a locate the artifact
              produced by the project relative to a repository root.</td>
        </tr>
        <tr>
          <td>${project.spec}</td>
          <td>Short form of uri.  The spec value is equivalent to the 
            uri without the "artifact:" protocol identifier.</td>
        </tr>
        <tr>
          <td>filename</td>
          <td>The filename of the final artifact that the resource represents.</td>
        </tr>
        <tr>
          <td>short-filename</td>
          <td>The filename without the file type suffix.</td>
        </tr>
      </table>

      </subsection>

      <subsection name="Property File Loading">

      <p>
      The home task will automatically load properties into the 
      current project.
      </p>

      <ul>
        <li>loading of ${basedir}/user.properties</li>
        <li>loading of ${basedir}/build.properties</li>
      </ul>

      <p>
      If a index has not been loaded then index.xml initialization will 
      occur relative to ${basedir}.  A search for index.xml will be undertaken 
      commencing with ${basedir} and proceeding though all parent directories.
      </p>

      </subsection>
      <subsection name="Project Identification">

      <p>
      A project build.xml identifies itself to magic using the 
      property ${project.name}.  The value of ${project.name}
      is the name of a project within the index.  If no ${project.name}
      property is defined, the name of the project (build file name)
      will be used as the key.  Subsequent version, project group, 
      dependency and plugin requirements will be resolved relative to 
      the project defintion identified by the key.
      </p>

      </subsection>

      <p>
      The following example demonstrates the initialization of 
      a index using the default search strategy.
      </p>

<source><![CDATA[
<x:index/>
]]></source>

    </section>
  </body>

</document>

